{"version":3,"sources":["a1-main/DAL/mainAPI.ts","a1-main/BLL/authReducer.ts","b1/features/profile/Profile.tsx","b1/features/auth/Login.tsx","b1/features/auth/Register.tsx","b1/features/errors/Errors.tsx","b1/features/pass/Password.tsx","b1/features/pass/SetPassword.tsx","a1-main/UI/Routes/Routes.tsx","a1-main/UI/Header/Header.tsx","App.tsx","reportWebVitals.ts","a1-main/BLL/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","name","put","delete","from","message","resetPasswordToken","slice","createSlice","initialState","isLoggedIn","isRegistered","isInitialized","user","_id","avatar","updatedUser","isPassUpdated","isPassSet","reducers","getLoginAC","state","action","payload","value","registerNewUser","getMe","getUpdatedUser","getUser","forgotPass","setPass","actions","authReducer","reducer","Profile","dispatch","useDispatch","useSelector","auth","userData","useState","setName","edit","setEdit","show","setShow","useEffect","then","res","data","catch","e","response","error","console","log","src","alt","type","autoFocus","onBlur","UpdatedUserTC","placeholder","onChange","currentTarget","onDoubleClick","onClick","to","PATH","login","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","pass","resetForm","profile","handleSubmit","getFieldProps","touched","style","color","Register","Errors","Password","SetPassword","token","useParams","isUpdated","setPassTC","register","renew","setPassword","Routes","path","exact","component","render","Header","replace","App","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89c705c7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL:'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials:true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email:string, password:string, rememberMe:boolean){\r\n        return instance.post<LoginRequestType>('auth/login', {email,password,rememberMe})\r\n    },\r\n    register(email:string, password:string){\r\n        return instance.post<ResponseNewUserType>('auth/register',{email,password})\r\n    },\r\n    me(){\r\n        return instance.post<userType>('auth/me')\r\n    },\r\n    updateUser(name:string){\r\n        return instance.put<ResponseUpdatedUserType>('auth/me', {name})\r\n    },\r\n    logOut(){\r\n        return instance.delete('auth/me')\r\n    },\r\n    forgot(email:string,from:string, message:string){\r\n        return instance.post('auth/forgot',{email,from,message})\r\n    },\r\n    setPassword(password:string, resetPasswordToken:string){\r\n        return instance.post<ResponseSetPasswordType>('auth/set-new-password',{password,resetPasswordToken})\r\n    }\r\n}\r\nexport type LoginRequestType = {\r\n    id:string;\r\n    email:string;\r\n    name:string;\r\n    avatar:string;\r\n    publicCardPacksCount:number;\r\n    created:Date;\r\n    updated:Date;\r\n    isAdmin:boolean;\r\n    verified:boolean;\r\n    rememberMe:boolean;\r\n}\r\nexport type ResponseNewUserType = {\r\n    addedUser:{},\r\n    error?:string\r\n}\r\nexport type ResponseUpdatedUserType = {\r\n    updatedUser:{},\r\n    error?:string\r\n}\r\nexport type ResponseSetPasswordType = {\r\n    info:string,\r\n    error:string\r\n}\r\nexport type userType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    error?: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, userType} from \"../DAL/mainAPI\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\ntype initialStateType ={\r\n    isLoggedIn:boolean;\r\n    isRegistered:boolean;\r\n    isInitialized:boolean;\r\n    user:userType\r\n    updatedUser:{},\r\n    isPassUpdated:boolean,\r\n    isPassSet:boolean,\r\n}\r\nexport const initialState:initialStateType = {\r\n    isLoggedIn: false,\r\n    isRegistered:false,\r\n    isInitialized:false,\r\n    user: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    updatedUser:{    },\r\n    isPassUpdated:false,\r\n    isPassSet:false,\r\n}\r\nexport const slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        getLoginAC(state, action:PayloadAction<{value:boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n        registerNewUser(state, action:PayloadAction<{value:boolean}>){\r\n            state.isRegistered = action.payload.value\r\n        },\r\n        getMe(state, action:PayloadAction<{value:boolean}>){\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        getUpdatedUser(state, action:PayloadAction<{name:string}>){\r\n            state.updatedUser = action.payload.name\r\n        },\r\n        getUser(state, action:PayloadAction<{user:userType}>){\r\n            state.user = action.payload.user\r\n        },\r\n        forgotPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassUpdated = action.payload.value\r\n        },\r\n        setPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassSet = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const {getLoginAC, registerNewUser, getMe, getUpdatedUser, getUser, forgotPass, setPass} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\nexport const getLoginTC = (email:string,pass:string, rememberMe:boolean) => (dispatch:Dispatch) => {\r\n    authAPI.login(email,pass,rememberMe).then((res)=>{\r\n        dispatch(getLoginAC({value:true}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\nexport const getRegisterTC = ((email:string, password:string) => (dispatch:Dispatch) =>{\r\n    authAPI.register(email,password).then((res)=>{\r\n            dispatch(registerNewUser({value:true}))\r\n    })\r\n        .catch((e)=>{\r\n        const error = e.response? e.response.data.error:\r\n            (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n    })\r\n})\r\nexport const authMe = (() => (dispatch:Dispatch) =>{\r\n    authAPI.me().then((res)=>{\r\n        dispatch(getLoginAC({value:true}))\r\n        dispatch(getUser({user:res.data}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n        .finally(()=>{\r\n            dispatch(getMe({value:true}))\r\n        })\r\n})\r\n\r\nexport const UpdatedUserTC = ((name:string) => (dispatch:Dispatch) =>{\r\n    authAPI.updateUser(name).then((res)=>{\r\n        dispatch(getUpdatedUser({name}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const logOutTC = (() => (dispatch:Dispatch) =>{\r\n    authAPI.logOut().then((res)=>{\r\n        dispatch(getLoginAC({value:false}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const getUserProfile = (() => (dispatch:Dispatch) =>{\r\n    authAPI.me().then((res)=>{\r\n        dispatch(getUser({user:res.data}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const forgotPassTC = (email:string,from:string, message:string) => (dispatch:Dispatch) =>{\r\n    authAPI.forgot(email,from,message).then((res)=>{\r\n        dispatch(forgotPass({value:true}))\r\n    })\r\n}\r\nexport const setPassTC = (pass:string, token:string) => (dispatch:Dispatch) =>{\r\n    authAPI.setPassword(pass,token).then((res)=>{\r\n        dispatch(setPass({value:true}))\r\n    })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfile, UpdatedUserTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport { userType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\nconst Profile = () =>{\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType,userType>(state => state.auth.user)\r\n    const [name, setName] = useState<string>(userData.name)\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [show,setShow] = useState<boolean>(false)\r\n    useEffect(()=>{\r\n        if(!isLoggedIn){\r\n            dispatch(getUserProfile())\r\n        }\r\n    },[dispatch,isLoggedIn])\r\n    const onChangeName = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEdit(true)\r\n        setName(userData.name)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEdit(false);\r\n        dispatch(UpdatedUserTC(name))\r\n    }\r\n    const onClickShow = () => {\r\n        setShow(!show)\r\n    }\r\n    if(!isLoggedIn){\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n\r\n                <img src={userData.avatar} alt=\"\"/>\r\n            </div>\r\n            {show &&\r\n                <div>{edit? <input type=\"text\" value={name} autoFocus onBlur={activateViewMode} placeholder={'new name'} onChange={onChangeName}/>:\r\n                    <span onDoubleClick={activateEditMode}>{name}</span>\r\n                }\r\n                </div>\r\n            }\r\n            <button onClick={onClickShow}>show</button>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import {useFormik} from 'formik';\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {getLoginTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst Login = () =>{\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if(!values.password){\r\n                errors.password = 'Required'\r\n            }else if(values.password.length < 4){\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getLoginTC(values.email,values.password,values.rememberMe))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if(isLoggedIn){\r\n        return <Redirect to={PATH.profile}/>\r\n    }\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")} />\r\n                <button type={'submit'} color={'primary'}>Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {getRegisterTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst Register = () =>{\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType,boolean>(state => state.auth.isRegistered)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            email:'',\r\n            password:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if(!values.password){\r\n                errors.password = 'Password is Required'\r\n            }else if(values.password.length < 4){\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit:values => {\r\n            formik.resetForm()\r\n            dispatch(getRegisterTC(values.email,values.password))\r\n\r\n        }\r\n    })\r\n    if(isRegistered){\r\n       return <Redirect to={PATH.login}/>\r\n    }\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <button type={'submit'} color={'primary'}>Register</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React from 'react'\r\n\r\nconst Errors = () =>{\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Errors","import React from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {forgotPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst Password = () =>{\r\n    const dispatch = useDispatch()\r\n    const fromEmail ='nya-admin@nya.nya'\r\n    const msg = 'Please get new pass'\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            email:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(forgotPassTC(values.email, fromEmail,msg))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Password","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst SetPassword = () =>{\r\n    const {token} = useParams<{token:string}>()\r\n    const dispatch = useDispatch()\r\n    const isUpdated = useSelector<AppRootStateType, boolean>(state => state.auth.isPassSet)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            password:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.password)) {\r\n                errors.password = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(setPassTC(values.password, token))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if(isUpdated){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps('password')} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SetPassword","import React from 'react'\r\nimport {Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../b1/features/profile/Profile\";\r\nimport Login from \"../../../b1/features/auth/Login\";\r\nimport Register from \"../../../b1/features/auth/Register\";\r\nimport Errors from \"../../../b1/features/errors/Errors\";\r\nimport Password from \"../../../b1/features/pass/Password\";\r\nimport SetPassword from \"../../../b1/features/pass/SetPassword\";\r\n\r\nexport const PATH = {\r\n    login:'/login',\r\n    register:'/register',\r\n    profile:'/profile',\r\n    error:'/404',\r\n    renew:'/renew',\r\n    setPassword:'/set-pass/:token'\r\n}\r\n\r\nconst Routes = () =>{\r\n\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact component={Profile}/>\r\n                <Route path={PATH.profile} component={Profile}/>\r\n                <Route path={PATH.login} component={Login}/>\r\n                <Route path={PATH.register} component={Register}/>\r\n                <Route path={PATH.error} component={Errors}/>\r\n                <Route path={PATH.renew} component={Password}/>\r\n                <Route path={PATH.setPassword} component={SetPassword}/>\r\n                <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Routes","import React from 'react'\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { PATH } from '../Routes/Routes'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../BLL/store\";\r\n\r\n\r\nconst Header = () =>{\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    return(\r\n        <div>\r\n            { isLoggedIn &&\r\n                <nav>\r\n                    <span><NavLink to={PATH.profile} replace>Profile</NavLink></span>\r\n                    <span><NavLink to={PATH.login} replace>Login</NavLink></span>\r\n                    <span><NavLink to={PATH.register} replace>Register</NavLink></span>\r\n                    <span><NavLink to={PATH.renew} replace>renew pass</NavLink></span>\r\n                    <span><NavLink to={PATH.setPassword} replace>set new pass</NavLink></span>\r\n                </nav>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React, {useEffect} from 'react';\nimport Header from './a1-main/UI/Header/Header';\nimport './App.css';\nimport {HashRouter, Redirect} from \"react-router-dom\";\nimport Routes, {PATH} from \"./a1-main/UI/Routes/Routes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./a1-main/BLL/store\";\nimport {authMe, logOutTC} from \"./a1-main/BLL/authReducer\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state =>state.auth.isLoggedIn )\n    const onClickLog = () => {\n        dispatch(logOutTC())\n    }\n    useEffect(()=>{\n        dispatch(authMe())\n    },[dispatch])\n\n    if(!isInitialized){\n        return <div>loading</div>\n    }\n  return (\n    <div>\n        <HashRouter>\n            {!isLoggedIn ? <Redirect to={PATH.login}/> : <button onClick={onClickLog}>logout</button>}\n            <Header/>\n            <Routes/>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-main/BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}