{"version":3,"sources":["a1-main/DAL/mainAPI.ts","a1-main/BLL/authReducer.ts","b1/features/profile/Profile.tsx","b1/features/auth/Login.tsx","b1/features/auth/Register.tsx","b1/features/errors/Errors.tsx","b1/features/pass/Password.tsx","b1/features/pass/SetPassword.tsx","a1-main/BLL/packReducer.ts","b1/features/packs/cardPacksPage.tsx","b1/features/packs/cardPacks.tsx","a1-main/BLL/cardReducer.ts","b1/features/cards/Card.tsx","b1/features/cards/Cards.tsx","a1-main/UI/Routes/Routes.tsx","a1-main/UI/Header/Header.tsx","App.tsx","reportWebVitals.ts","a1-main/BLL/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","name","put","delete","from","message","resetPasswordToken","packAPI","packData","get","cardsPack","id","_id","cardAPI","cardData","card","question","slice","createSlice","initialState","isLoggedIn","isRegistered","isInitialized","user","avatar","updatedUser","isPassUpdated","isPassSet","status","reducers","getLoginAC","state","action","payload","value","registerNewUser","getMe","getUpdatedUser","getUser","forgotPass","setPass","setAppStatusAC","actions","authReducer","reducer","Profile","dispatch","useDispatch","useSelector","auth","userData","useState","setName","edit","setEdit","show","setShow","useEffect","then","res","data","catch","e","response","error","console","log","src","alt","type","autoFocus","onBlur","UpdatedUserTC","placeholder","onChange","currentTarget","onDoubleClick","onClick","to","PATH","login","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","pass","resetForm","profile","handleSubmit","getFieldProps","touched","style","color","Register","password_confirmation","Errors","Password","SetPassword","token","useParams","isUpdated","setPassTC","cardPacks","myCardsPack","isDeleted","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","sortCardsPacks","user_id","newCardsPack","updatedCardsPack","getPacks","packsData","getNewPack","changeSort","newSort","checkMyPack","delPacks","updatePackName","packReducer","getPacksTC","getState","params","packs","max","min","sortPacks","CardPacksPage","props","newName","setNewName","deletePack","delPack","updPack","updatePack","TableBody","TableCell","component","scope","cardsCount","align","created","updated","isChecked","disabled","CardPacks","title","setTitle","React","setPage","rowsPerPage","setRowsPerPage","checked","setChecked","classes","makeStyles","table","minWidth","useStyles","newPackHandler","createNewPack","newPackSortByName","TableContainer","Paper","Table","className","aria-label","TableHead","newValue","TableRow","map","el","TablePagination","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","cards","cardsTotalCount","maxGrade","minGrade","packUserId","sortCards","newCardCreated","getCards","newCard","cardReducer","getCardsTC","packId","cardsPack_id","Card","showHandler","newQuestion","setNewQuestion","updCard","updCardTC","answer","shots","grade","delCardHandler","addNewCard","Cards","packID","getSortedCards","getNewCard","delCardTC","register","renew","setPassword","Routes","path","exact","render","Header","Navbar","light","expand","Nav","navbar","NavItem","App","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed33f280.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<userType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<ResponseNewUserType>('auth/register', {email, password})\r\n    },\r\n    me() {\r\n        return instance.post<userType>('auth/me')\r\n    },\r\n    updateUser(name: string) {\r\n        return instance.put<ResponseUpdatedUserType>('auth/me', {name})\r\n    },\r\n    logOut() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    forgot(email: string, from: string, message: string) {\r\n        return instance.post('auth/forgot', {email, from, message})\r\n    },\r\n    setPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<ResponseSetPasswordType>('auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\nexport const packAPI = {\r\n    cardsPack(packData: GetCardsPacksModuleType) {\r\n        return instance.get<getCardsPackResponseType>('cards/pack', packData)\r\n    },\r\n    createPack(name: string) {\r\n        return instance.post<cardPacksType>('cards/pack', {cardsPack: {name: name}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack/?id=${id}`)\r\n    },\r\n    updatePack(_id: string, name: string) {\r\n        return instance.put('cards/pack', {cardsPack: {_id: _id, name: name}})\r\n    }\r\n}\r\nexport const cardAPI = {\r\n    getCards(cardData: GetCardsModuleType) {\r\n        return instance.get<getCardResponseType>('cards/card', cardData)\r\n    },\r\n    createCard(card: createCardType) {\r\n        return instance.post('cards/card', {card})\r\n    },\r\n    deleteCard(id:string){\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    updateCard(_id:string,question:string){\r\n        return instance.put('cards/card',{card: {_id,question}})\r\n    }\r\n}\r\nexport type createCardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n    question: string;\r\n    answer: string;\r\n    grade: number;\r\n    shots: number;\r\n}\r\nexport type GetCardsModuleType = {\r\n    params: {\r\n        cardAnswer?: string;\r\n        cardQuestion?: string;\r\n        cardsPack_id?: string;\r\n        min?: number;\r\n        max?: number;\r\n        sortCards?: '0grade' | '1grade' | '0shot' | '1shot'\r\n        page?: number;\r\n        pageCount?: number;\r\n    }\r\n}\r\nexport type getCardResponseType = {\r\n    cards: cardType[]\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n}\r\nexport type cardType = {\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade: number;\r\n    shots: number;\r\n    user_id: string;\r\n    created: string,\r\n    updated: string,\r\n    _id: string\r\n\r\n}\r\nexport type GetCardsPacksModuleType = {\r\n    params: {\r\n        min?: number\r\n        max?: number\r\n        sortPacks?: \"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\" | '1updated' | '0updated' | '0created' | '1created'\r\n        page?: number\r\n        pageCount?: number\r\n        user_id: string\r\n        cardPacksTotalCount:number\r\n    }\r\n}\r\nexport type cardPacksType = {\r\n    _id: string;\r\n    user_id: string;\r\n    name: string;\r\n    cardsCount: number;\r\n    created: string;\r\n    updated: string;\r\n}\r\nexport type getCardsPackResponseType = {\r\n    cardPacks: cardPacksType[]\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n}\r\nexport type ResponseNewUserType = {\r\n    addedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseUpdatedUserType = {\r\n    updatedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseSetPasswordType = {\r\n    info: string,\r\n    error: string\r\n}\r\nexport type userType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    error?: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, userType} from \"../DAL/mainAPI\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype initialStateType ={\r\n    isLoggedIn:boolean;\r\n    isRegistered:boolean;\r\n    isInitialized:boolean;\r\n    user:userType\r\n    updatedUser:{},\r\n    isPassUpdated:boolean,\r\n    isPassSet:boolean,\r\n    status:RequestStatusType\r\n}\r\nconst initialState:initialStateType = {\r\n    isLoggedIn: false,\r\n    isRegistered:false,\r\n    isInitialized:false,\r\n    user: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    updatedUser:{    },\r\n    isPassUpdated:false,\r\n    isPassSet:false,\r\n    status:'idle'\r\n}\r\nconst slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        getLoginAC(state, action:PayloadAction<{value:boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n        registerNewUser(state, action:PayloadAction<{value:boolean}>){\r\n            state.isRegistered = action.payload.value\r\n        },\r\n        getMe(state, action:PayloadAction<{value:boolean}>){\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        getUpdatedUser(state, action:PayloadAction<{name:string}>){\r\n            state.updatedUser = action.payload.name\r\n        },\r\n        getUser(state, action:PayloadAction<{user:userType}>){\r\n            state.user = action.payload.user\r\n        },\r\n        forgotPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassUpdated = action.payload.value\r\n        },\r\n        setPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassSet = action.payload.value\r\n        },\r\n        setAppStatusAC:(state, action:PayloadAction<{status:RequestStatusType}>)=>{\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\nexport const {getLoginAC, registerNewUser, getMe, getUpdatedUser, getUser, forgotPass, setPass,setAppStatusAC} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\nexport const getLoginTC = (email:string,pass:string, rememberMe:boolean) => (dispatch:Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(email,pass,rememberMe).then((res)=>{\r\n        const {_id, name, email, avatar} = res.data\r\n        dispatch(getLoginAC({value:true}))\r\n        dispatch(getUser({user:{_id, name, email, avatar}}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\nexport const getRegisterTC = (email:string, password:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.register(email,password).then((res)=>{\r\n            dispatch(registerNewUser({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n        const error = e.response? e.response.data.error:\r\n            (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n    })\r\n}\r\nexport const authMe = () => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.me().then((res)=>{\r\n        dispatch(getLoginAC({value:true}))\r\n        dispatch(getUser({user:res.data}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        }).finally(()=>{\r\n        dispatch(getMe({value:true}))\r\n    })\r\n}\r\n\r\nexport const UpdatedUserTC = ((name:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.updateUser(name).then((res)=>{\r\n        dispatch(getUpdatedUser({name}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const logOutTC = (() => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logOut().then((res)=>{\r\n        dispatch(getLoginAC({value:false}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const getUserProfile = (() => (dispatch:Dispatch) =>{\r\n    authAPI.me().then((res)=>{\r\n        const {_id, name, email, avatar} = res.data\r\n        dispatch(getUser({user:{_id, name, email, avatar}}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const forgotPassTC = (email:string,from:string, message:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.forgot(email,from,message).then((res)=>{\r\n        dispatch(forgotPass({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const setPassTC = (pass:string, token:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.setPassword(pass,token).then((res)=>{\r\n        dispatch(setPass({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfile, UpdatedUserTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {userType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType, userType>(state => state.auth.user)\r\n    const [name, setName] = useState<string>(userData.name)\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [show, setShow] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        if (!isLoggedIn) dispatch(getUserProfile())\r\n    }, [])\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEdit(true)\r\n        setName(userData.name)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEdit(false);\r\n        dispatch(UpdatedUserTC(name))\r\n    }\r\n    const onClickShow = () => {\r\n        setShow(!show)\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={userData.avatar} alt=\"\"/>\r\n            </div>\r\n            {show &&\r\n            <div>{edit ? <input type=\"text\" value={name} autoFocus onBlur={activateViewMode} placeholder={'new name'}\r\n                                onChange={onChangeName}/> :\r\n                <span onDoubleClick={activateEditMode}>{name}</span>\r\n            }\r\n            </div>\r\n            }\r\n            <button onClick={onClickShow}>show</button>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import {useFormik} from 'formik';\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {getLoginTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getLoginTC(values.email, values.password, values.rememberMe))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.profile}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")} />\r\n                <button type={'submit'} color={'primary'}>Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {getRegisterTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password_confirmation: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            if (values.password_confirmation !== values.password) {\r\n                errors.password = 'Passwords should match'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(getRegisterTC(values.email, values.password))\r\n\r\n        }\r\n    })\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password_confirmation\")} />\r\n                    {formik.touched.password_confirmation && formik.errors.password_confirmation &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password_confirmation}</div>}\r\n                </div>\r\n                <button type={'submit'} color={'primary'}>Register</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React from 'react'\r\n\r\nconst Errors = () =>{\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Errors","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\nconst Password = () =>{\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const fromEmail ='nya-admin@nya.nya'\r\n    const msg = `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='http://tengrix.github.io/projectv2/#/set-pass/$token$'>link</a></div>`\r\n        const formik = useFormik({\r\n        initialValues:{\r\n            email:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(forgotPassTC(values.email, fromEmail,msg))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Password","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst SetPassword = () =>{\r\n    const {token} = useParams<{token:string}>()\r\n    const dispatch = useDispatch()\r\n    const isUpdated = useSelector<AppRootStateType, boolean>(state => state.auth.isPassSet)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            password:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.password)) {\r\n                errors.password = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(setPassTC(values.password, token))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if(isUpdated){\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps('password')} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SetPassword","import {createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {\r\n    cardPacksType,\r\n    getCardsPackResponseType,\r\n    GetCardsPacksModuleType,\r\n    packAPI\r\n} from \"../DAL/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppStatusAC} from \"./authReducer\";\r\ntype initialStateType = {\r\n    cardPacks:cardPacksType[];\r\n    myCardsPack:boolean;\r\n    isDeleted:boolean;\r\n    cardPacksTotalCount:number;\r\n    maxCardsCount:number;\r\n    minCardsCount:number;\r\n    page:number;\r\n    pageCount:number;\r\n    sortCardsPacks:\"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\"|'1updated'|'0updated'|'0created'|'1created';\r\n    user_id:string;\r\n    newCardsPack:{\r\n        name:string\r\n    },\r\n    updatedCardsPack:{\r\n        name:string\r\n    }\r\n}\r\nconst initialState:initialStateType = {\r\n    cardPacks:[],\r\n    myCardsPack:false,\r\n    isDeleted:false,\r\n    cardPacksTotalCount:14,\r\n    maxCardsCount:1,\r\n    minCardsCount:0,\r\n    page:1,\r\n    pageCount:10,\r\n    sortCardsPacks: \"0cardsCount\",\r\n    user_id:'',\r\n    newCardsPack:{\r\n        name:''\r\n    },\r\n    updatedCardsPack:{\r\n        name:''\r\n    }\r\n}\r\n\r\nconst slice = createSlice({\r\n    name:'packReducer',\r\n    initialState:initialState,\r\n    reducers:{\r\n        getPacks(state, action:PayloadAction<{packsData:getCardsPackResponseType}>){\r\n            state.cardPacks = action.payload.packsData.cardPacks\r\n            state.cardPacksTotalCount = action.payload.packsData.cardPacksTotalCount\r\n            state.page = action.payload.packsData.page\r\n            state.maxCardsCount = action.payload.packsData.maxCardsCount\r\n            state.pageCount = action.payload.packsData.pageCount\r\n            state.minCardsCount = action.payload.packsData.minCardsCount\r\n        },\r\n        getNewPack(state,action:PayloadAction<{ name: string }>){\r\n            state.newCardsPack.name = action.payload.name\r\n        },\r\n        changeSort(state, action:PayloadAction<{newSort:\"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\"|'1updated'|'0updated'|'0created'|'1created'}>){\r\n            state.sortCardsPacks = action.payload.newSort\r\n        },\r\n        checkMyPack(state,action:PayloadAction<{value:boolean}>){\r\n            state.myCardsPack = action.payload.value\r\n        },\r\n        delPacks(state,action:PayloadAction<{value:boolean}>){\r\n            state.isDeleted = action.payload.value\r\n        },\r\n        updatePackName(state,action:PayloadAction<{name:string}>){\r\n            state.updatedCardsPack.name = action.payload.name\r\n        },\r\n    }\r\n})\r\nexport const {getPacks,getNewPack,changeSort,checkMyPack,delPacks,updatePackName} = slice.actions\r\nexport const packReducer = slice.reducer\r\n\r\nexport const getPacksTC = () => (dispatch:Dispatch, getState:()=>AppRootStateType) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    const state = getState()\r\n    const packData:GetCardsPacksModuleType = {\r\n        params:{\r\n            page:state.packs.page,\r\n            max:state.packs.maxCardsCount,\r\n            pageCount:state.packs.pageCount,\r\n            min:state.packs.minCardsCount,\r\n            sortPacks:state.packs.sortCardsPacks,\r\n            user_id:state.packs.user_id,\r\n            cardPacksTotalCount:state.packs.cardPacksTotalCount\r\n        }\r\n    }\r\n    if(state.packs.myCardsPack){\r\n        packData.params.user_id = state.auth.user._id\r\n    }else{\r\n        packData.params.user_id = ''\r\n    }\r\n    packAPI.cardsPack(packData).then(res=>{\r\n        dispatch(getPacks({packsData:res.data}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const createNewPack = (name:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>)=>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.createPack(name).then(res=>{\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const delPack = (id:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.deletePack(id).then(()=>{\r\n        dispatch(delPacks({value:true}))\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const updatePack = (id:string, name:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.updatePack(id,name).then((res)=>{\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}","import {TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {cardPacksType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {delPack, updatePack, updatePackName} from \"../../../a1-main/BLL/packReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype cardPacksPageType = {\r\n    packs: cardPacksType;\r\n    isChecked:boolean;\r\n    status:RequestStatusType\r\n}\r\n\r\nconst CardPacksPage = (props:cardPacksPageType) =>{\r\n    const dispatch = useDispatch()\r\n\r\n    const [edit, setEdit] = useState<boolean>(true)\r\n    const [newName, setNewName] = useState<string>('')\r\n\r\n    const deletePack = (id: string) => {\r\n        dispatch(delPack(id))\r\n    }\r\n    const updPack = (id: string, name: string) => {\r\n        dispatch(updatePackName({name: newName}))\r\n        dispatch(updatePack(id, name))\r\n    }\r\n    const editHandler = () => {\r\n        setEdit(!edit)\r\n    }\r\n\r\n    return(\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.packs.name}\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\">{props.packs.cardsCount}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.created}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.updated}</TableCell>\r\n            {props.isChecked &&\r\n            <TableCell align=\"right\">\r\n                <button disabled={props.status === 'loading'} onClick={() => editHandler()}>edit</button>\r\n                <button disabled={props.status === 'loading'} onClick={() => deletePack(props.packs._id)}>del</button>\r\n                { !edit ? <input type=\"text\" value={newName} onChange={(e) => setNewName(e.currentTarget.value)}/> : ''}\r\n                 <button disabled={props.status === 'loading'} onClick={() => updPack(props.packs._id, newName)}>save</button>\r\n            </TableCell>\r\n            }\r\n            <NavLink to={'/cards/'+props.packs._id}>\r\n                <button disabled={props.status==='loading'}>learn</button>\r\n            </NavLink>\r\n        </TableBody>\r\n    )\r\n}\r\nexport default CardPacksPage;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    changeSort,\r\n    checkMyPack,\r\n    createNewPack,\r\n    getPacksTC,\r\n} from \"../../../a1-main/BLL/packReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {cardPacksType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {Table} from \"reactstrap\";\r\nimport {Paper, TableCell, TableContainer, TableHead, TablePagination, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport CardPacksPage from \"./cardPacksPage\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\nconst CardPacks = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType,RequestStatusType>(state => state.auth.status)\r\n    const packs = useSelector<AppRootStateType, cardPacksType[]>(state => state.packs.cardPacks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const name = useSelector<AppRootStateType, string>(state => state.packs.newCardsPack.name)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n\r\n    const [title, setTitle] = useState<string>(name)\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [checked, setChecked] = useState<boolean>(isChecked)\r\n    const handleChangePage = (event: any, newPage: number) => {\r\n        setPage(newPage);\r\n        dispatch(getPacksTC())\r\n    };\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n        dispatch(getPacksTC())\r\n    };\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [])\r\n    const newPackHandler = (title: string) => {\r\n        dispatch(createNewPack(title))\r\n    }\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const isItMyPack = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.currentTarget.checked\r\n        setChecked(newValue)\r\n        dispatch(checkMyPack({value: newValue}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const newPackSortByName = (name: \"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\" | '1updated' | '0updated' | '0created' | '1created') => {\r\n        dispatch(changeSort({newSort: name}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    return (\r\n\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <input type=\"checkbox\" checked={checked} onChange={isItMyPack}/>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1name')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0name')}>↓</button>\r\n                            Name</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0cardsCount')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1cardsCount')}>↓</button>\r\n                            Cards Count</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1created')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0created')}>↓</button>\r\n                            Created</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1updated')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0updated')}>↓</button>\r\n                            Updated</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <input disabled={status==='loading'} type=\"text\" value={title} onChange={onChangeName}/>\r\n                            <button disabled={status==='loading'} onClick={() => newPackHandler(title)}>add</button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                    {packs.map((el) => (\r\n\r\n                         <CardPacksPage\r\n                             key={el._id}\r\n                             packs={el}\r\n                             isChecked={isChecked}\r\n                             status={status}\r\n                         />\r\n\r\n                    ))}\r\n            </Table>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={packs.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default CardPacks","import {createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {cardAPI, cardType, createCardType, getCardResponseType, GetCardsModuleType} from \"../DAL/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\ntype initialStateType = {\r\n    cards:cardType[]\r\n    cardsTotalCount:number;\r\n    maxGrade:number;\r\n    minGrade:number;\r\n    page:number;\r\n    pageCount:number;\r\n    packUserId:string;\r\n    sortCards:'0grade'|'1grade'|'0shot'|'1shot';\r\n    newCardCreated:boolean;\r\n}\r\nconst initialState:initialStateType = {\r\n    cards:[],\r\n    cardsTotalCount:3,\r\n    maxGrade:5,\r\n    minGrade:1,\r\n    page:1,\r\n    pageCount:10,\r\n    packUserId:'',\r\n    sortCards:'0grade',\r\n    newCardCreated:false\r\n}\r\nconst slice = createSlice({\r\n    name:'cardReducer',\r\n    initialState: initialState,\r\n    reducers:{\r\n        getCards(state,action:PayloadAction<{cardData:getCardResponseType}>){\r\n            state.cards = action.payload.cardData.cards\r\n            state.page = action.payload.cardData.page\r\n            state.pageCount = action.payload.cardData.pageCount\r\n            state.packUserId = action.payload.cardData.packUserId\r\n            state.cardsTotalCount = action.payload.cardData.cardsTotalCount\r\n            state.maxGrade = action.payload.cardData.maxGrade\r\n            state.minGrade = action.payload.cardData.minGrade\r\n        },\r\n        sortCards(state,action:PayloadAction<{value:'0grade'|'1grade'|'0shot'|'1shot'}>){\r\n            state.sortCards = action.payload.value\r\n        },\r\n        newCard(state,action:PayloadAction<{value:boolean}>){\r\n            state.newCardCreated = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const {getCards,sortCards,newCard} = slice.actions\r\nexport const cardReducer = slice.reducer\r\n\r\nexport const getCardsTC = (packId:string) => (dispatch:Dispatch,getState:()=>AppRootStateType) =>{\r\n    let state = getState()\r\n    const cardData:GetCardsModuleType = {\r\n        params:{\r\n            min:state.cards.minGrade,\r\n            max:state.cards.maxGrade,\r\n            page:state.cards.page,\r\n            sortCards:state.cards.sortCards,\r\n            pageCount:state.cards.pageCount,\r\n            cardsPack_id:packId\r\n        }\r\n    }\r\n    cardAPI.getCards(cardData).then((res)=>{\r\n        dispatch(getCards({cardData:res.data}))\r\n    })\r\n}\r\nexport const createCardTC = (packId:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>, getState:()=>AppRootStateType) =>{\r\n    let state = getState()\r\n    let getNewCard:createCardType = {\r\n            _id:state.auth.user._id,\r\n            cardsPack_id:packId,\r\n            grade:0,\r\n            shots:0,\r\n            answer:'no answer',\r\n            question:'no question'\r\n    }\r\n    cardAPI.createCard(getNewCard).then((res)=>{\r\n        dispatch(getCardsTC(packId))\r\n    })\r\n}\r\nexport const delCardTC = (id:string) => () =>{\r\n    cardAPI.deleteCard(id).then(()=>{\r\n    })\r\n}\r\nexport const updCardTC = (id:string,question:string,packId:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>, getState:()=>AppRootStateType) => {\r\n    cardAPI.updateCard(id,question).then(()=>{\r\n        dispatch(getCardsTC(packId))\r\n    })\r\n}","import {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updCardTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype CardType = {\r\n    card: cardType;\r\n    delCardHandler:(id:string)=>void;\r\n    id:string;\r\n    packId:string;\r\n    addNewCard:(id:string)=>void;\r\n    status:RequestStatusType\r\n}\r\nconst Card = (props: CardType) => {\r\n    const dispatch = useDispatch()\r\n    const [show,setShow] = useState<boolean>(false)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const showHandler = () => {\r\n        setShow(!show)\r\n    }\r\n    const [newQuestion, setNewQuestion] = useState<string>('')\r\n    const questionUpdHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewQuestion(e.currentTarget.value)\r\n    }\r\n    const updCard = (id:string,question:string, packId:string ) => {\r\n        dispatch(updCardTC(id,question,packId))\r\n    }\r\n    return (\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.card.question}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {show && props.card.answer}\r\n                {!show? <button disabled={props.status==='loading'} onClick={() => showHandler()}>show</button>:<button onClick={() => showHandler()}>close</button>}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.shots}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.grade}\r\n            </TableCell>\r\n            {isChecked &&\r\n                <TableCell>\r\n                    <TableCell align=\"left\">\r\n                        <button disabled={props.status==='loading'} onClick={()=>props.delCardHandler(props.id)}>del</button>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">\r\n                        <input disabled={props.status==='loading'} type=\"text\" value={newQuestion} onChange={questionUpdHandler}/>\r\n                        <button disabled={props.status==='loading'} onClick={()=>updCard(props.id,newQuestion,props.packId)}>upd</button>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        <button disabled={props.status==='loading'} onClick={()=>props.addNewCard(props.packId)}>add</button>\r\n                    </TableCell>\r\n                </TableCell>\r\n\r\n            }\r\n        </TableBody>\r\n    )\r\n}\r\nexport default Card;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useEffect} from \"react\";\r\nimport {createCardTC, delCardTC, getCardsTC, sortCards} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {Paper, Table, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\nconst Cards = () => {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, cardType[]>(state => state.cards.cards)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType,RequestStatusType>(state => state.auth.status)\r\n    const {packID} = useParams<{ packID: string }>()\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(packID))\r\n    }, [dispatch,packID])\r\n    const getSortedCards = (name: '0grade' | '1grade' | '0shot' | '1shot') => {\r\n        dispatch(sortCards({value: name}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const addNewCard = (id:string) => {\r\n        dispatch(createCardTC(id))\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const delCardHandler = (id:string) =>{\r\n        dispatch(delCardTC(id))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    // if(!isCreated){\r\n    //     return <div>loading</div>\r\n    // }\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Questions</TableCell>\r\n                        <TableCell align=\"left\">Answers</TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('1shot')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('0shot')}>↓</button>\r\n                            Shots\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('1grade')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('0grade')}>↓</button>\r\n                            Grades\r\n                        </TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                {cards.length && cards.map((el) =>\r\n                    <Card\r\n                        key={el._id}\r\n                        id={el._id}\r\n                        card={el}\r\n                        delCardHandler={delCardHandler}\r\n                        packId={packID}\r\n                        addNewCard={addNewCard}\r\n                        status={status}\r\n                    />)}\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default Cards;","import React from 'react'\r\nimport {Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../b1/features/profile/Profile\";\r\nimport Login from \"../../../b1/features/auth/Login\";\r\nimport Register from \"../../../b1/features/auth/Register\";\r\nimport Errors from \"../../../b1/features/errors/Errors\";\r\nimport Password from \"../../../b1/features/pass/Password\";\r\nimport SetPassword from \"../../../b1/features/pass/SetPassword\";\r\nimport CardPacks from \"../../../b1/features/packs/cardPacks\";\r\nimport Cards from \"../../../b1/features/cards/Cards\";\r\n\r\nexport const PATH = {\r\n    login:'/login',\r\n    register:'/register',\r\n    profile:'/profile',\r\n    error:'/404',\r\n    renew:'/renew',\r\n    setPassword:'/set-pass/:token',\r\n    packs:'/packs',\r\n    cards:'/cards/:packID?'\r\n}\r\n\r\nconst Routes = () =>{\r\n\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact component={Profile}/>\r\n                <Route path={PATH.profile} component={Profile}/>\r\n                <Route path={PATH.login} component={Login}/>\r\n                <Route path={PATH.register} component={Register}/>\r\n                <Route path={PATH.error} component={Errors}/>\r\n                <Route path={PATH.renew} component={Password}/>\r\n                <Route path={PATH.setPassword} component={SetPassword}/>\r\n                <Route path={PATH.packs} component={CardPacks}/>\r\n                <Route path={PATH.cards} component={Cards}/>\r\n                <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Routes","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {PATH} from '../Routes/Routes'\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem,\r\n} from 'reactstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <Nav className=\"mr-auto\" navbar>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.profile}>Profile</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.login}>Sign In</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.register}>Sign Up</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.renew}>Renew Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.setPassword}>Set Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.packs}>Packs</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React, {useEffect} from 'react';\nimport Header from './a1-main/UI/Header/Header';\nimport './App.css';\nimport {HashRouter, Redirect} from \"react-router-dom\";\nimport Routes, {PATH} from \"./a1-main/UI/Routes/Routes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./a1-main/BLL/store\";\nimport {authMe, logOutTC} from \"./a1-main/BLL/authReducer\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state =>state.auth.isLoggedIn )\n    const onClickLog = () => {\n        dispatch(logOutTC())\n    }\n    useEffect(()=>{\n        dispatch(authMe())\n    },[dispatch])\n\n    if(!isInitialized){\n        return <div>loading</div>\n    }\n  return (\n    <div>\n        <HashRouter>\n            {!isLoggedIn ? <Redirect to={PATH.login}/> : <button onClick={onClickLog}>logout</button>}\n            <Header/>\n            <Routes/>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {packReducer} from \"./packReducer\";\r\nimport {cardReducer} from \"./cardReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer,\r\n    packs:packReducer,\r\n    cards:cardReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-main/BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}