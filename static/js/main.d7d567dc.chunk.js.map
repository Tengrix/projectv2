{"version":3,"sources":["a1-main/DAL/mainAPI.ts","a1-main/BLL/authReducer.ts","b1/features/profile/Profile.tsx","b1/features/auth/Login.tsx","b1/features/auth/Register.tsx","b1/features/errors/Errors.tsx","b1/features/pass/Password.tsx","b1/features/pass/SetPassword.tsx","a1-main/BLL/packReducer.ts","b1/features/packs/cardPacksPage.tsx","b1/features/packs/TablePagination.tsx","b1/features/packs/addNewPack.tsx","b1/features/packs/cardPacks.tsx","a1-main/BLL/cardReducer.ts","b1/features/cards/UpdateCard.tsx","b1/features/cards/DeleteCard.tsx","b1/features/cards/Card.tsx","b1/features/cards/AddNewCard.tsx","b1/features/LearnMode/LearningCards.tsx","b1/features/cards/searchCard.tsx","b1/features/cards/Cards.tsx","a1-main/UI/Routes/Routes.tsx","a1-main/UI/Header/Header.tsx","App.tsx","reportWebVitals.ts","a1-main/BLL/store.ts","index.tsx","common/cards.module.css","b1/features/packs/pagination.module.css","b1/features/packs/search.module.css"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","name","put","delete","from","message","resetPasswordToken","packAPI","packData","get","cardsPack","id","_id","cardAPI","cardData","card","question","answer","grade","card_id","getLoginTC","createAsyncThunk","params","thunkAPI","a","dispatch","setAppStatusAC","status","res","data","avatar","getLoginAC","value","getUser","user","response","error","console","log","getRegisterTC","param","authMe","arg","getMe","UpdatedUserTC","getUpdatedUser","logOutTC","getUserProfile","forgotPassTC","forgotPass","setPassTC","token","setPass","slice","createSlice","initialState","isLoggedIn","isRegistered","isInitialized","updatedUser","isPassUpdated","isPassSet","reducers","state","action","payload","registerNewUser","actions","authReducer","reducer","Profile","useDispatch","useSelector","auth","userData","useState","setName","edit","setEdit","show","setShow","useEffect","src","alt","type","autoFocus","onBlur","placeholder","onChange","e","currentTarget","onDoubleClick","onClick","to","PATH","login","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","profile","handleSubmit","getFieldProps","touched","style","color","Register","password_confirmation","Errors","Password","SetPassword","useParams","isUpdated","getPacksTC","getState","packs","page","pageCount","sortPacks","sortCardsPacks","user_id","cardPacksTotalCount","myCardsPack","getPacks","packsData","createNewPack","delPack","updatePack","cardPacks","isDeleted","maxCardsCount","minCardsCount","newPageForShow","currentPortionToPaginator","newCardsPack","updatedCardsPack","getNewPack","changeSort","newSort","checkMyPack","delPacks","updatePackName","setNewPage","newShowPage","setNewPortion","currentPortion","packReducer","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","CardPacksPage","props","newName","setNewName","classes","React","modalStyle","open","setOpen","del","setDel","body","className","disabled","updPack","TableBody","TableCell","component","scope","cardsCount","align","created","updated","isChecked","Modal","onClose","aria-labelledby","aria-describedby","TablePaginationActions","pageNumbers","i","ceil","totalNumberOfPacks","rowsPerPage","push","portionCount","portionSize","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","styles","paginatorBody","buttons","filter","p","map","pageStyle","pageActive","numberPageStyle","onChangePaginate","CreateNewPack","title","setTitle","newPackHandler","addNewPack","CardPacks","sortPack","checked","setChecked","table","minWidth","newPackSortByName","TableContainer","Paper","Table","aria-label","TableHead","newValue","TableRow","s","button","el","newPage","getCardsTC","packId","cards","sortCards","cardsPack_id","cardQuestion","search","cardAnswer","learnMode","cardsTotalCount","learningMode","getCards","createCardTC","getNewCard","shots","delCardTC","updCardTC","getGradeTC","maxGrade","minGrade","packUserId","newCardCreated","updatedGrade","newCard","setSearchQuestion","keyWordForQuestion","keyWordForAnswer","setNewCardsPage","setNewCardsPortion","setLearningModeOn","modeOn","cardReducer","UpdateCard","newQuestion","setNewQuestion","newAnswer","setNewAnswer","updCard","DeleteCard","handleClose","deleteCard","Card","showHandler","delCardHandler","AddNewCard","event","addNewCard","LearningCards","cardsTotal","numQA","setNumQA","countA","setCountA","randomQ","setRandomQ","getAllQuestion","getAllRandomQuestion","getAllAnswers","getIdOfQuestion","out","j","nextQuestion","floor","startAgain","Button","variant","newGrades","SearchCard","searchMode","setSearchMode","setQuestion","setAnswer","SearchInput","Cards","sortCard","packID","getSortedCards","register","renew","setPassword","Routes","path","exact","render","Header","Navbar","light","expand","Nav","navbar","NavItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d7d567dc.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<userType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<ResponseNewUserType>('auth/register', {email, password})\r\n    },\r\n    me() {\r\n        return instance.post<userType>('auth/me')\r\n    },\r\n    updateUser(name: string) {\r\n        return instance.put<ResponseUpdatedUserType>('auth/me', {name})\r\n    },\r\n    logOut() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    forgot(email: string, from: string, message: string) {\r\n        return instance.post('auth/forgot', {email, from, message})\r\n    },\r\n    setPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<ResponseSetPasswordType>('auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\nexport const packAPI = {\r\n    cardsPack(packData: GetCardsPacksModuleType) {\r\n        return instance.get<getCardsPackResponseType>('cards/pack', packData)\r\n    },\r\n    createPack(name: string) {\r\n        return instance.post<cardPacksType>('cards/pack', {cardsPack: {name: name}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack/?id=${id}`)\r\n    },\r\n    updatePack(_id: string, name: string) {\r\n        return instance.put('cards/pack', {cardsPack: {_id: _id, name: name}})\r\n    }\r\n}\r\nexport const cardAPI = {\r\n    getCards(cardData: GetCardsModuleType) {\r\n        return instance.get<getCardResponseType>('cards/card', cardData)\r\n    },\r\n    createCard(card: createCardType) {\r\n        return instance.post('cards/card', {card})\r\n    },\r\n    deleteCard(id:string){\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    updateCard(_id:string,question:string,answer:string){\r\n        return instance.put('cards/card',{card: {_id,question,answer}})\r\n    },\r\n    getGrade(grade:number,card_id:string){\r\n        return instance.put('cards/grade',{grade,card_id})\r\n    }\r\n}\r\nexport type createCardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n    question: string;\r\n    answer: string;\r\n    grade: number;\r\n    shots: number;\r\n}\r\nexport type GetCardsModuleType = {\r\n    params: {\r\n        cardAnswer?: string;\r\n        cardQuestion?: string;\r\n        cardsPack_id?: string;\r\n        min?: number;\r\n        max?: number;\r\n        sortCards?: '0grade' | '1grade' | '0shots' | '1shots'\r\n        page?: number;\r\n        pageCount?: number;\r\n    }\r\n}\r\nexport type getCardResponseType = {\r\n    cards: cardType[]\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n}\r\nexport type cardType = {\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade: number;\r\n    shots: number;\r\n    user_id: string;\r\n    created: string,\r\n    updated: string,\r\n    _id: string\r\n\r\n}\r\nexport type GetCardsPacksModuleType = {\r\n    params: {\r\n        min?: number\r\n        max?: number\r\n        sortPacks?: \"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\" | '1updated' | '0updated' | '0created' | '1created'\r\n        page?: number\r\n        pageCount?: number\r\n        user_id: string\r\n        cardPacksTotalCount:number\r\n    }\r\n}\r\nexport type cardPacksType = {\r\n    _id: string;\r\n    user_id: string;\r\n    name: string;\r\n    cardsCount: number;\r\n    created: string;\r\n    updated: string;\r\n}\r\nexport type getCardsPackResponseType = {\r\n    cardPacks: cardPacksType[]\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n}\r\nexport type ResponseNewUserType = {\r\n    addedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseUpdatedUserType = {\r\n    updatedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseSetPasswordType = {\r\n    info: string,\r\n    error: string\r\n}\r\nexport type userType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    error?: string\r\n}","import {authAPI, userType} from \"../DAL/mainAPI\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AuthInitialStateType = {\r\n    isLoggedIn: boolean;\r\n    isRegistered: boolean;\r\n    isInitialized: boolean;\r\n    user: userType\r\n    updatedUser: {},\r\n    isPassUpdated: boolean,\r\n    isPassSet: boolean,\r\n    status: RequestStatusType\r\n}\r\nconst initialState: AuthInitialStateType = {\r\n    isLoggedIn: false,\r\n    isRegistered: false,\r\n    isInitialized: false,\r\n    user: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    updatedUser: {},\r\n    isPassUpdated: false,\r\n    isPassSet: false,\r\n    status: 'idle'\r\n}\r\n\r\nexport const getLoginTC = createAsyncThunk('auth/login', async (params: { email: string, password: string, rememberMe: boolean }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(params.email, params.password, params.rememberMe)\r\n        const {_id, name, email, avatar} = res.data\r\n        thunkAPI.dispatch(getLoginAC({value: true}))\r\n        thunkAPI.dispatch(getUser({user: {_id, name, email, avatar}}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const getRegisterTC = createAsyncThunk('auth/register', async (param: { email: string, password: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.register(param.email, param.password)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {value: true}\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const authMe = createAsyncThunk('auth/authMe', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.me()\r\n        thunkAPI.dispatch(getLoginAC({value: true}))\r\n        thunkAPI.dispatch(getUser({user: res.data}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n    thunkAPI.dispatch(getMe({value: true}))\r\n})\r\nexport const UpdatedUserTC = createAsyncThunk('auth/updateUser', async (name: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.updateUser(name)\r\n        thunkAPI.dispatch(getUpdatedUser({name}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const logOutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        thunkAPI.dispatch(getLoginAC({value: false}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const getUserProfile = createAsyncThunk('auth/profile', async (arg, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        const {_id, name, email, avatar} = res.data\r\n        thunkAPI.dispatch(getUser({user: {_id, name, email, avatar}}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const forgotPassTC = createAsyncThunk('auth/getNewPass', async (params: { email: string, from: string, message: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.forgot(params.email, params.from, params.message)\r\n        thunkAPI.dispatch(forgotPass({value: true}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const setPassTC = createAsyncThunk('auth/setPass', async (params: { password: string, token: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.setPassword(params.password, params.token)\r\n        thunkAPI.dispatch(setPass({value: true}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        getLoginAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n        registerNewUser(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isRegistered = action.payload.value\r\n        },\r\n        getMe(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        getUpdatedUser(state, action: PayloadAction<{ name: string }>) {\r\n            state.updatedUser = action.payload.name\r\n        },\r\n        getUser(state, action: PayloadAction<{ user: userType }>) {\r\n            state.user = action.payload.user\r\n        },\r\n        forgotPass(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isPassUpdated = action.payload.value\r\n        },\r\n        setPass(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isPassSet = action.payload.value\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\nexport const {\r\n    getLoginAC,\r\n    registerNewUser,\r\n    getMe,\r\n    getUpdatedUser,\r\n    getUser,\r\n    forgotPass,\r\n    setPass,\r\n    setAppStatusAC\r\n} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfile, UpdatedUserTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {userType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType, userType>(state => state.auth.user)\r\n    const [name, setName] = useState<string>(userData.name)\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [show, setShow] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        if (!isLoggedIn) dispatch(getUserProfile())\r\n    }, [])\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEdit(true)\r\n        setName(userData.name)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEdit(false);\r\n        dispatch(UpdatedUserTC(name))\r\n    }\r\n    const onClickShow = () => {\r\n        setShow(!show)\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={userData.avatar} alt=\"\"/>\r\n            </div>\r\n            {show &&\r\n            <div>{edit ? <input type=\"text\" value={name} autoFocus onBlur={activateViewMode} placeholder={'new name'}\r\n                                onChange={onChangeName}/> :\r\n                <span onDoubleClick={activateEditMode}>{name}</span>\r\n            }\r\n            </div>\r\n            }\r\n            <button onClick={onClickShow}>show</button>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import {useFormik} from 'formik';\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {getLoginTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getLoginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.profile}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")} />\r\n                <button type={'submit'} color={'primary'}>Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {getRegisterTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password_confirmation: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            if (values.password_confirmation !== values.password) {\r\n                errors.password = 'Passwords should match'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(getRegisterTC(values))\r\n\r\n        }\r\n    })\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password_confirmation\")} />\r\n                    {formik.touched.password_confirmation && formik.errors.password_confirmation &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password_confirmation}</div>}\r\n                </div>\r\n                <button type={'submit'} color={'primary'}>Register</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React from 'react'\r\n\r\nconst Errors = () =>{\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Errors","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\nconst Password = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const fromEmail = 'nya-admin@nya.nya'\r\n    const msg = `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='http://tengrix.github.io/projectv2/#/set-pass/$token$'>link</a></div>`\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            from: fromEmail,\r\n            message: msg\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(forgotPassTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Password","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst SetPassword = () =>{\r\n    const {token} = useParams<{token:string}>()\r\n    const dispatch = useDispatch()\r\n    const isUpdated = useSelector<AppRootStateType, boolean>(state => state.auth.isPassSet)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            password:'',\r\n            token:token\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.password)) {\r\n                errors.password = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(setPassTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if(isUpdated){\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps('password')} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SetPassword","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {cardPacksType, getCardsPackResponseType, GetCardsPacksModuleType, packAPI} from \"../DAL/mainAPI\";\r\nimport {AuthInitialStateType, setAppStatusAC} from \"./authReducer\";\r\n\r\nexport type PackSortType =\r\n      \"0name\"\r\n    | \"1name\"\r\n    | \"0cardsCount\"\r\n    | \"1cardsCount\"\r\n    | '1updated'\r\n    | '0updated'\r\n    | '0created'\r\n    | '1created'\r\nexport type initialStateType = {\r\n    cardPacks: cardPacksType[];\r\n    myCardsPack: boolean;\r\n    isDeleted: boolean;\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n    sortCardsPacks: PackSortType;\r\n    user_id: string;\r\n    newPageForShow: number,\r\n    currentPortionToPaginator: number,\r\n    newCardsPack: {\r\n        name: string\r\n    },\r\n    updatedCardsPack: {\r\n        name: string\r\n    }\r\n}\r\nconst initialState: initialStateType = {\r\n    cardPacks: [],\r\n    myCardsPack: false,\r\n    isDeleted: false,\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 103,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    newPageForShow: 1,\r\n    currentPortionToPaginator: 1,\r\n    sortCardsPacks: \"0cardsCount\",\r\n    user_id: '',\r\n    newCardsPack: {\r\n        name: ''\r\n    },\r\n    updatedCardsPack: {\r\n        name: ''\r\n    }\r\n}\r\n\r\nexport const getPacksTC = createAsyncThunk('packs/getPack', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const {auth} = thunkAPI.getState() as { auth: AuthInitialStateType }\r\n    const {packs} = thunkAPI.getState() as { packs: initialStateType }\r\n    const packData: GetCardsPacksModuleType = {\r\n        params: {\r\n            page: packs.page,\r\n            pageCount: packs.pageCount,\r\n            sortPacks: packs.sortCardsPacks,\r\n            user_id: packs.user_id,\r\n            cardPacksTotalCount: packs.cardPacksTotalCount\r\n        }\r\n    }\r\n    if (packs.myCardsPack) {\r\n        packData.params.user_id = auth.user._id\r\n    }\r\n    try {\r\n        const res = await packAPI.cardsPack(packData)\r\n        thunkAPI.dispatch(getPacks({packsData: res.data}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const createNewPack = createAsyncThunk('packs/createNewPack', async (name: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await packAPI.createPack(name)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        thunkAPI.dispatch(getPacksTC())\r\n        return\r\n    } catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const delPack = createAsyncThunk('packs/del', async (id: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await packAPI.deletePack(id)\r\n        thunkAPI.dispatch(getPacksTC())\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    } catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const updatePack = createAsyncThunk('packs/updatePack', async (params: { id: string, name: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await packAPI.updatePack(params.id, params.name)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        thunkAPI.dispatch(getPacksTC())\r\n    } catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nconst slice = createSlice({\r\n    name: 'packReducer',\r\n    initialState: initialState,\r\n    reducers: {\r\n        getPacks(state, action: PayloadAction<{ packsData: getCardsPackResponseType }>) {\r\n            state.cardPacks = action.payload.packsData.cardPacks\r\n            state.cardPacksTotalCount = action.payload.packsData.cardPacksTotalCount\r\n            state.page = action.payload.packsData.page\r\n            state.maxCardsCount = action.payload.packsData.maxCardsCount\r\n            state.pageCount = action.payload.packsData.pageCount\r\n            state.minCardsCount = action.payload.packsData.minCardsCount\r\n        },\r\n        getNewPack(state, action: PayloadAction<{ name: string }>) {\r\n            state.newCardsPack.name = action.payload.name\r\n        },\r\n        changeSort(state, action: PayloadAction<{ newSort: PackSortType }>) {\r\n            state.sortCardsPacks = action.payload.newSort\r\n        },\r\n        checkMyPack(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.myCardsPack = action.payload.value\r\n        },\r\n        delPacks(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isDeleted = action.payload.value\r\n        },\r\n        updatePackName(state, action: PayloadAction<{ name: string }>) {\r\n            state.updatedCardsPack.name = action.payload.name\r\n        },\r\n        setNewPage(state, action: PayloadAction<{ newShowPage: number }>) {\r\n            state.page = action.payload.newShowPage\r\n        },\r\n        setNewPortion(state, action: PayloadAction<{ currentPortion: number }>) {\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        }\r\n    }\r\n})\r\nexport const {\r\n    getPacks,\r\n    getNewPack,\r\n    changeSort,\r\n    checkMyPack,\r\n    delPacks,\r\n    updatePackName,\r\n    setNewPage,\r\n    setNewPortion\r\n} = slice.actions\r\nexport const packReducer = slice.reducer\r\n\r\n","import {makeStyles, Modal, TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {cardPacksType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {delPack, updatePack, updatePackName} from \"../../../a1-main/BLL/packReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype cardPacksPageType = {\r\n    packs: cardPacksType;\r\n    isChecked: boolean;\r\n    status: RequestStatusType\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst CardPacksPage = (props: cardPacksPageType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [edit, setEdit] = useState<boolean>(true)\r\n    const [newName, setNewName] = useState<string>(props.packs.name)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [del,setDel] = useState<boolean>(false)\r\n    const param = {\r\n        id:props.packs._id,\r\n        name:newName\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const deletePack = (id: string) => {\r\n        dispatch(delPack(id))\r\n    }\r\n    const updPack = (param:{id: string, name: string}) => {\r\n        dispatch(updatePackName({name: newName}))\r\n        dispatch(updatePack(param))\r\n        setOpen(false)\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <input type=\"text\" value={newName} onChange={(e) => setNewName(e.currentTarget.value)}/>\r\n            <button disabled={props.status === 'loading'} onClick={()=>setDel(true)}>del</button>\r\n            {edit ?\r\n                <span>\r\n                <button disabled={props.status === 'loading'} onClick={() => updPack(param)}>save\r\n            </button>\r\n            </span>\r\n                : ''}\r\n            { del?\r\n            <div>\r\n            Are you sure?\r\n            <button disabled={props.status === 'loading'} onClick={() => deletePack(props.packs._id)}>yes</button>\r\n            <button disabled={props.status === 'loading'} onClick={()=>setDel(false)}>no</button>\r\n\r\n        </div>:''}\r\n\r\n\r\n        </div>\r\n    )\r\n    return (\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.packs.name}\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\">{props.packs.cardsCount}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.created}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.updated}</TableCell>\r\n            {props.isChecked &&\r\n            <TableCell align=\"right\">\r\n                <button disabled={props.status === 'loading'} type=\"button\" onClick={handleOpen}>\r\n                    Edit\r\n                </button>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    {body}\r\n                </Modal>\r\n            </TableCell>\r\n            }\r\n            <NavLink to={'/cards/' + props.packs._id}>\r\n                <button disabled={props.status === 'loading'}>explore</button>\r\n            </NavLink>\r\n        </TableBody>\r\n    )\r\n}\r\nexport default CardPacksPage;","import React, {useState} from \"react\";\r\nimport styles from \"./pagination.module.css\"\r\ninterface TablePaginationActionsProps {\r\n    currentPortion:number;\r\n    page:number;\r\n    rowsPerPage:number;\r\n    totalNumberOfPacks:number\r\n    onChangePaginate:(page:number,currentPortion:number)=>void\r\n    portionSize:number\r\n}\r\n\r\nexport function TablePaginationActions(props: TablePaginationActionsProps) {\r\n    const pageNumbers = []\r\n    for(let i = 1; i <= Math.ceil(props.totalNumberOfPacks/props.rowsPerPage);i++){\r\n        pageNumbers.push(i)\r\n    }\r\n    const portionCount = Math.ceil(Math.ceil(props.totalNumberOfPacks/props.rowsPerPage) / props.portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(props.currentPortion)\r\n    const leftPortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPortionNumber = portionNumber * props.portionSize\r\n    return (\r\n            <div className={styles.paginatorBody}>\r\n                <button\r\n                    onClick={() => setPortionNumber(1)}\r\n                    disabled={portionNumber == 1}\r\n                    className={styles.buttons}\r\n                >\r\n                    - -\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}\r\n                    disabled={portionNumber == 1}\r\n                    className={styles.buttons}\r\n                >\r\n                    -\r\n                </button>\r\n                {pageNumbers\r\n                    .filter((p) => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                    .map((p) => {\r\n                        const pageStyle = `${props.page === p && styles.pageActive} ${\r\n                            styles.numberPageStyle\r\n                        }`\r\n                        return (\r\n                            <button key={p} onClick={() => props.onChangePaginate(p,portionNumber)} className={pageStyle}>\r\n                            {p}\r\n                        </button>\r\n                        )\r\n                    })}\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}\r\n                    disabled={portionCount <= portionNumber}\r\n                    className={styles.buttons}\r\n                >\r\n                    +\r\n                </button>\r\n                <button\r\n                    onClick={() => setPortionNumber(portionCount)}\r\n                    disabled={portionCount <= portionNumber}\r\n                    className={styles.buttons}\r\n                >\r\n                    ++\r\n                </button>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {initialStateType} from \"../../../a1-main/BLL/packReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype CreateNewPackType = {\r\n    status:RequestStatusType;\r\n    packData:initialStateType;\r\n    newPackHandler:(title:string)=>void\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst CreateNewPack = (props:CreateNewPackType) => {\r\n    const [title, setTitle] = useState<string>(props.packData.newCardsPack.name)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const addNewPack = (title:string) => {\r\n        props.newPackHandler(title)\r\n        setOpen(false)\r\n    }\r\n    const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n        <input disabled={props.status==='loading'} placeholder={'New Pack'} type=\"text\" value={title} onChange={onChangeName}/>\r\n        <button disabled={props.status==='loading'} onClick={() => addNewPack(title)}>add</button>\r\n    </div>\r\n    )\r\n    return(\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>\r\n                Add new pack\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateNewPack;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {\r\n    changeSort,\r\n    checkMyPack,\r\n    createNewPack,\r\n    getPacksTC,\r\n    initialStateType,\r\n    PackSortType,\r\n    setNewPage,\r\n    setNewPortion,\r\n} from \"../../../a1-main/BLL/packReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Table} from \"reactstrap\";\r\nimport {Paper, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport CardPacksPage from \"./cardPacksPage\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {TablePaginationActions} from \"./TablePagination\";\r\nimport CreateNewPack from \"./addNewPack\";\r\nimport s from '../../../common/cards.module.css'\r\n\r\nconst CardPacks = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.auth.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const cardData = useSelector<AppRootStateType, initialStateType>(state => state.packs)\r\n    const sortPack = useSelector<AppRootStateType, PackSortType>(state => state.packs.sortCardsPacks)\r\n    const [savedData, setSavedData] = useState()\r\n    const [checked, setChecked] = useState<boolean>(isChecked)\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [])\r\n    const newPackHandler = (title: string) => {\r\n        dispatch(createNewPack(title))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const isItMyPack = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.currentTarget.checked\r\n        setChecked(newValue)\r\n        dispatch(checkMyPack({value: newValue}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const newPackSortByName = (name: PackSortType) => {\r\n        dispatch(changeSort({newSort: name}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const paginate = (newPage: number, currentPortion: number) => {\r\n        dispatch(setNewPage({newShowPage: newPage}))\r\n        dispatch(setNewPortion({currentPortion: currentPortion}))\r\n        dispatch(getPacksTC())\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    My pack <input type=\"checkbox\" checked={checked} onChange={isItMyPack}/>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <button className={sortPack === \"1name\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('1name')}>↑\r\n                            </button>\r\n                            <button className={sortPack === \"0name\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('0name')}>↓\r\n                            </button>\r\n                            Name</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button className={sortPack === \"0cardsCount\" ? s.button : ''}\r\n                                    disabled={status === 'loading'} onClick={() => newPackSortByName('0cardsCount')}>↑\r\n                            </button>\r\n                            <button className={sortPack === \"1cardsCount\" ? s.button : ''}\r\n                                    disabled={status === 'loading'} onClick={() => newPackSortByName('1cardsCount')}>↓\r\n                            </button>\r\n                            Cards Count</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button className={sortPack === \"1created\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('1created')}>↑\r\n                            </button>\r\n                            <button className={sortPack === \"0created\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('0created')}>↓\r\n                            </button>\r\n                            Created</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button className={sortPack === \"1updated\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('1updated')}>↑\r\n                            </button>\r\n                            <button className={sortPack === \"0updated\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => newPackSortByName('0updated')}>↓\r\n                            </button>\r\n                            Updated</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            {\r\n                                isChecked && <CreateNewPack\r\n                                    newPackHandler={newPackHandler}\r\n                                    packData={cardData}\r\n                                    status={status}/>\r\n                            }\r\n\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {cardData.cardPacks.map((el) => (\r\n                    <CardPacksPage\r\n                        key={el._id}\r\n                        packs={el}\r\n                        isChecked={isChecked}\r\n                        status={status}\r\n                    />\r\n                ))}\r\n            </Table>\r\n            <TablePaginationActions\r\n                rowsPerPage={10}\r\n                totalNumberOfPacks={cardData.cardPacksTotalCount}\r\n                page={cardData.page}\r\n                onChangePaginate={paginate}\r\n                portionSize={5}\r\n                currentPortion={cardData.currentPortionToPaginator}\r\n            />\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default CardPacks","import {createAsyncThunk, createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {cardAPI, cardType, createCardType, getCardResponseType, GetCardsModuleType} from \"../DAL/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppStatusAC} from \"./authReducer\";\r\nexport type sortCardsType = '0grade'|'1grade'|'0shots'|'1shots'\r\nexport type cardInitialStateType = {\r\n    cards:cardType[]\r\n    cardsTotalCount:number;\r\n    maxGrade:number;\r\n    minGrade:number;\r\n    page:number;\r\n    currentPortionToPaginator:number;\r\n    pageCount:number;\r\n    packUserId:string;\r\n    sortCards:sortCardsType;\r\n    newCardCreated:{\r\n        answer:string,\r\n        question:string\r\n    }\r\n    search: {\r\n        answer:string,\r\n        question:string\r\n    }\r\n    updatedGrade:{\r\n        grade:number,\r\n    },\r\n    learningMode:boolean;\r\n}\r\nconst initialState:cardInitialStateType = {\r\n    cards:[],\r\n    cardsTotalCount:3,\r\n    maxGrade:5,\r\n    minGrade:1,\r\n    page:1,\r\n    pageCount:10,\r\n    currentPortionToPaginator:1,\r\n    packUserId:'',\r\n    sortCards:'0grade',\r\n    newCardCreated:{\r\n        answer:'',\r\n        question:''\r\n    },\r\n    search: {\r\n        answer:'',\r\n        question:''\r\n    },\r\n    updatedGrade:{\r\n        grade:0,\r\n    },\r\n    learningMode:false\r\n}\r\n\r\nexport const getCardsTC = createAsyncThunk('cards/getCards', async (packId:string, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    let state = thunkAPI.getState() as AppRootStateType\r\n    const cardData:GetCardsModuleType = {\r\n        params:{\r\n            page:state.cards.page,\r\n            sortCards:state.cards.sortCards,\r\n            pageCount:state.cards.pageCount,\r\n            cardsPack_id:packId,\r\n            cardQuestion:state.cards.search.question,\r\n            cardAnswer:state.cards.search.answer,\r\n        }\r\n    }\r\n    const learnMode:GetCardsModuleType ={\r\n        params:{\r\n            cardsPack_id:packId,\r\n            pageCount:state.cards.cardsTotalCount\r\n        }\r\n    }\r\n    try{\r\n        const res = await cardAPI.getCards(state.cards.learningMode?learnMode:cardData)\r\n        thunkAPI.dispatch(getCards({cardData:res.data}))\r\n        thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    }catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n\r\n})\r\nexport const createCardTC = createAsyncThunk('cards/createCard', async (params:{packId:string,question:string, answer:string}, thunkAPI)=>{\r\n    let state = thunkAPI.getState() as AppRootStateType\r\n    let getNewCard:createCardType = {\r\n        _id:state.auth.user._id,\r\n        cardsPack_id:params.packId,\r\n        grade:0,\r\n        shots:0,\r\n        answer:params.answer,\r\n        question:params.question\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await cardAPI.createCard(getNewCard)\r\n        thunkAPI.dispatch(getCardsTC(params.packId))\r\n        thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    }catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const delCardTC = createAsyncThunk('cards/delCard', async (id:string, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try{\r\n        const res = await cardAPI.deleteCard(id)\r\n        thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    }catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\nexport const updCardTC = createAsyncThunk('cards/updCard', async (params:{id:string,question:string,answer:string,packId:string}, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try{\r\n        const res = await cardAPI.updateCard(params.id,params.question,params.answer)\r\n        thunkAPI.dispatch(getCardsTC(params.packId))\r\n        thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    }catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n\r\n})\r\nexport const getGradeTC = createAsyncThunk('cards/getGrade', async (params:{grade:number,id:string,packId:string}, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await cardAPI.getGrade(params.grade, params.id)\r\n        thunkAPI.dispatch(getCardsTC(params.packId))\r\n        thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    }catch (e){\r\n        const error = e.response ? e.response.data.error :\r\n            (e.message + ',more details in the console')\r\n        console.log('Error: ', {...e})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name:'cardReducer',\r\n    initialState: initialState,\r\n    reducers:{\r\n        getCards(state,action:PayloadAction<{cardData:getCardResponseType}>){\r\n            state.cards = action.payload.cardData.cards\r\n            state.page = action.payload.cardData.page\r\n            state.pageCount = action.payload.cardData.pageCount\r\n            state.packUserId = action.payload.cardData.packUserId\r\n            state.cardsTotalCount = action.payload.cardData.cardsTotalCount\r\n            state.maxGrade = action.payload.cardData.maxGrade\r\n            state.minGrade = action.payload.cardData.minGrade\r\n        },\r\n        sortCards(state,action:PayloadAction<{value:sortCardsType}>){\r\n            state.sortCards = action.payload.value\r\n        },\r\n        newCard(state,action:PayloadAction<{question:string, answer:string}>){\r\n            state.newCardCreated.answer = action.payload.answer\r\n            state.newCardCreated.question = action.payload.question\r\n        },\r\n        setSearchQuestion(state,action:PayloadAction<{keyWordForQuestion:string, keyWordForAnswer:string}>){\r\n            state.search.question = action.payload.keyWordForQuestion\r\n            state.search.answer = action.payload.keyWordForAnswer\r\n        },\r\n        setNewCardsPage(state,action:PayloadAction<{newShowPage:number}>){\r\n            state.page = action.payload.newShowPage\r\n        },\r\n        setNewCardsPortion(state,action:PayloadAction<{currentPortion:number}>){\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        },\r\n        setLearningModeOn(state,action:PayloadAction<{modeOn:boolean}>){\r\n            state.learningMode = action.payload.modeOn\r\n        }\r\n    }\r\n})\r\nexport const {getCards,sortCards,newCard,setSearchQuestion,setNewCardsPortion,setNewCardsPage,setLearningModeOn} = slice.actions\r\nexport const cardReducer = slice.reducer\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype UpdateCardType = {\r\n    status:RequestStatusType;\r\n    updCard:(params:{id: string, question: string, answer: string, packId: string})=>void;\r\n    id:string;\r\n    packId:string;\r\n    question:string;\r\n    answer:string\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst UpdateCard = (props:UpdateCardType) => {\r\n    const [newQuestion, setNewQuestion] = useState<string>(props.question)\r\n    const [newAnswer, setNewAnswer] = useState<string>(props.answer)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n    const params = {\r\n        id:props.id,\r\n        question:newQuestion,\r\n        answer:newAnswer,\r\n        packId:props.packId\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const questionUpdHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewQuestion(e.currentTarget.value)\r\n    }\r\n    const answerUpdHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewAnswer(e.currentTarget.value)\r\n    }\r\n    const updateCard = () => {\r\n        props.updCard(params)\r\n        setOpen(false)\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <input disabled={props.status==='loading'} placeholder={'New Question'} type=\"text\" value={newQuestion} onChange={questionUpdHandler}/>\r\n            <input disabled={props.status==='loading'} placeholder={'New Question'} type=\"text\" value={newAnswer} onChange={answerUpdHandler}/>\r\n            <button disabled={props.status==='loading'} onClick={updateCard}>upd</button>\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <button type=\"button\" disabled={props.status === 'loading'} onClick={handleOpen}>\r\n                update Card\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateCard;","import React, {useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\ntype DeleteCardType = {\r\n    status:RequestStatusType;\r\n    deleteCard:(id:string)=>void;\r\n    id:string;\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst DeleteCard = (props:DeleteCardType) => {\r\n    const [del,setDel] = useState<boolean>(false)\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        setDel(true)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            { del ?\r\n                <div>\r\n                    Are you sure?\r\n                    <button disabled={props.status === 'loading'} onClick={()=>props.deleteCard(props.id)}>yes</button>\r\n                    <button disabled={props.status === 'loading'} onClick={handleClose}>no</button>\r\n                </div>\r\n                :''}\r\n        </div>\r\n\r\n    )\r\n    return(\r\n        <div>\r\n            <button disabled={props.status === 'loading'} type=\"button\" onClick={handleOpen}>\r\n                delete card\r\n            </button>\r\n\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    {body}\r\n                </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default DeleteCard;","import {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updCardTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport UpdateCard from \"./UpdateCard\";\r\nimport DeleteCard from \"./DeleteCard\";\r\n\r\ntype CardType = {\r\n    card: cardType;\r\n    delCardHandler:(id:string)=>void;\r\n    id:string;\r\n    packId:string;\r\n    status:RequestStatusType\r\n}\r\nconst Card = (props: CardType) => {\r\n    const dispatch = useDispatch()\r\n    const [show,setShow] = useState<boolean>(false)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const showHandler = () => {\r\n        setShow(!show)\r\n    }\r\n\r\n    const updCard = (params:{id: string, question: string, answer: string, packId: string}) => {\r\n        dispatch(updCardTC(params))\r\n    }\r\n    return (\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.card.question}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {show && props.card.answer}\r\n                {!show? <button disabled={props.status==='loading'} onClick={() => showHandler()}>show</button>:<button onClick={() => showHandler()}>close</button>}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.shots}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.grade}\r\n            </TableCell>\r\n            {isChecked &&\r\n                <TableCell>\r\n                        <DeleteCard\r\n                            status={props.status}\r\n                            deleteCard={props.delCardHandler}\r\n                            id={props.id}\r\n                        />\r\n                      <UpdateCard\r\n                          updCard={updCard}\r\n                          status={props.status}\r\n                          id={props.id}\r\n                          packId={props.packId}\r\n                          question={props.card.question}\r\n                          answer={props.card.answer}\r\n                      />\r\n                </TableCell>\r\n\r\n            }\r\n        </TableBody>\r\n    )\r\n}\r\nexport default Card;","import React, {useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype AddNewCardType = {\r\n    addNewCard:(params:{packId: string, question: string, answer: string})=>void\r\n    status:RequestStatusType;\r\n    packId:string\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst AddNewCard = (props:AddNewCardType) => {\r\n    const [newQuestion, setNewQuestion] = useState<string>('')\r\n    const [newAnswer, setNewAnswer] = useState<string>('')\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n    const params = {\r\n        packId:props.packId,\r\n        question:newQuestion,\r\n        answer:newAnswer\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const addNewCard = (params:{packId: string, question: string, answer: string}) => {\r\n        props.addNewCard(params)\r\n        setOpen(false)\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n        <input type=\"text\" value={newQuestion} placeholder={'New Question'} onChange={event => setNewQuestion(event.currentTarget.value)}/>\r\n        <input type=\"text\" value={newAnswer} placeholder={'New Answer'} onChange={event => setNewAnswer(event.currentTarget.value)}/>\r\n        <button disabled={props.status==='loading'} onClick={()=>addNewCard(params)}>add</button>\r\n    </div>)\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>\r\n                Add Card\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default AddNewCard;\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport React, {useState} from \"react\";\r\nimport {getCardsTC, getGradeTC, setLearningModeOn} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {Button, makeStyles, Modal} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype LearningCardsType = {\r\n    status: RequestStatusType;\r\n    packId: string\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand()\r\n    const left = 50 + rand()\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: \"absolute\",\r\n        width: 500,\r\n        backgroundColor: \"lightpink\",\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}))\r\n\r\n\r\nconst LearningCards = (props: LearningCardsType) => {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, cardType[]>(state => state.cards.cards)\r\n    const cardsTotal = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const [numQA, setNumQA] = useState<number>(0)\r\n    const [countA, setCountA] = useState<number>(1)\r\n    const grade = [\"super easy\", \"easy\", \"just fine\", \"hard\", \"super hard\"]\r\n    const [show, setShow] = useState<boolean>(false)\r\n    const [randomQ, setRandomQ] = useState<boolean>(false)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        dispatch(setLearningModeOn({modeOn: true}))\r\n        dispatch(getCardsTC(props.packId))\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const showAnswer = () => {\r\n        setShow(!show)\r\n    }\r\n    let getAllQuestion: Array<any> = []\r\n    let getAllRandomQuestion: Array<any> = []\r\n    let getAllAnswers: Array<string | number> = []\r\n    let getIdOfQuestion: Array<string> = []\r\n    let out: Array<number> = [];\r\n    cards.map((el) => (getAllQuestion.push([el.question]), getAllAnswers.push(el.answer),\r\n        getIdOfQuestion.push(el._id), getAllRandomQuestion.push([el.question])))\r\n    cards.map((el, i) => getAllQuestion[i].push(el.grade))\r\n    for (let i = 0; i < getAllQuestion.length; ++i) {\r\n        for (let j = 0; j < getAllQuestion[i][1]; ++j) {\r\n            out.push(getAllQuestion[i][0]);\r\n        }\r\n    }\r\n    const nextQuestion = () => {\r\n        setNumQA(numQA + 1)\r\n        setCountA(countA + 1)\r\n        if (randomQ) {\r\n            setNumQA(out[Math.floor(Math.random() * out.length)])\r\n            setCountA(countA + 1)\r\n        }\r\n    }\r\n    const startAgain = () => {\r\n        setRandomQ(true)\r\n        setCountA(1)\r\n    }\r\n    const newGrades = (grade: number, id: string, packId: string) => {\r\n        const params = {\r\n            grade,\r\n            id,\r\n            packId\r\n        }\r\n        dispatch(getGradeTC(params))\r\n        nextQuestion()\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">Learn \"Pack Name\"</h2>\r\n            <div id=\"simple-modal-description\">\r\n                <span>\r\n                    Question number: {countA}/{cardsTotal}{\" \"}\r\n                </span>\r\n                <div>{randomQ ? out[Math.floor(Math.random() * out.length)] : getAllRandomQuestion[numQA]}</div>\r\n                <div>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant={\"outlined\"}\r\n                        disabled={false}\r\n                        onClick={showAnswer}\r\n                    >\r\n                        show answer\r\n                    </Button>\r\n                </div>\r\n                <div>{show ? getAllAnswers[numQA] : \"\"}</div>\r\n            </div>\r\n            <div>\r\n                {countA === cardsTotal+1 ? (\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            variant={\"outlined\"}\r\n                            onClick={() => {\r\n                                startAgain()\r\n                            }}\r\n                        >\r\n                            start again\r\n                        </Button>\r\n                    ) :\r\n                    <div>\r\n                        <h4>Rate Yourself</h4>\r\n                        {grade.map((el, i) => (\r\n                            <Button\r\n                                key={\"grade-\" + i}\r\n                                onClick={() => newGrades(i + 1, getIdOfQuestion[numQA], props.packId)}\r\n                            >\r\n                                {el}\r\n                            </Button>\r\n                        ))}\r\n                    </div>}\r\n            </div>\r\n            <Button color=\"secondary\" variant=\"outlined\" onClick={handleClose}>\r\n                Cancel\r\n            </Button>\r\n            {countA === cardsTotal ? (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={true}\r\n                    onClick={() => {\r\n                        startAgain()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            ) : (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={false}\r\n                    onClick={() => {\r\n                        nextQuestion()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            )}\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={handleOpen}\r\n                    disabled={props.status === 'loading'}\r\n                >\r\n                    Learning MODE\r\n                </Button>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    {body}\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LearningCards;","import {ChangeEvent, useState} from \"react\";\r\nimport s from '../packs/search.module.css'\r\nimport {getCardsTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\ntype SearchType={\r\n    search:(question:string,answer:string)=>void;\r\n    packID: string\r\n}\r\n\r\nconst SearchCard = (props:SearchType) => {\r\n    const dispatch = useDispatch()\r\n    const [searchMode, setSearchMode] = useState<boolean>(false)\r\n    const [question,setQuestion] = useState<string>('')\r\n    const [answer,setAnswer] = useState<string>('')\r\n    const activateMode = () => {\r\n        setSearchMode(!searchMode)\r\n    }\r\n    const onSearchQuestionHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const onSearchAnswerHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setAnswer(e.currentTarget.value)\r\n    }\r\n    const onClickHandler = () => {\r\n        props.search(question,answer)\r\n        setQuestion('')\r\n        setAnswer('')\r\n\r\n    }\r\n    return(\r\n        <span>\r\n            <button onClick={activateMode}>find</button>\r\n            {searchMode &&\r\n                <span>\r\n                    <button onClick={onClickHandler}>search</button>\r\n                    <div>\r\n                            <input type=\"text\"\r\n                                   className={s.SearchInput}\r\n                                   value={question}\r\n                                   onChange={onSearchQuestionHandler}\r\n                                   placeholder={'Search question'}\r\n                            />\r\n                    </div><div>\r\n                            <input type=\"text\"\r\n                                   value={answer}\r\n                                   className={s.SearchInput}\r\n                                   onChange={onSearchAnswerHandler}\r\n                                   placeholder={'Search answer'}\r\n                            />\r\n                    </div>\r\n                </span>\r\n            }\r\n        </span>\r\n    )\r\n}\r\nexport default SearchCard;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    cardInitialStateType,\r\n    createCardTC,\r\n    delCardTC,\r\n    getCardsTC, setNewCardsPage, setNewCardsPortion, setSearchQuestion,\r\n    sortCards, sortCardsType\r\n} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {Paper, Table, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {TablePaginationActions} from \"../packs/TablePagination\";\r\nimport AddNewCard from \"./AddNewCard\";\r\nimport LearningCards from \"../LearnMode/LearningCards\";\r\nimport SearchCard from \"./searchCard\";\r\nimport s from '../../../common/cards.module.css'\r\n\r\nconst Cards = () => {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, cardInitialStateType>(state => state.cards)\r\n    const sortCard = useSelector<AppRootStateType, sortCardsType>(state => state.cards.sortCards)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.auth.status)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const {packID} = useParams<{ packID: string }>()\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        getSortedCards('1grade')\r\n    }, [dispatch, packID])\r\n\r\n    const getSortedCards = (name: sortCardsType) => {\r\n        dispatch(sortCards({value: name}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const addNewCard = (params: { packId: string, question: string, answer: string }) => {\r\n        dispatch(createCardTC(params))\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const delCardHandler = (id: string) => {\r\n        dispatch(delCardTC(id))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n\r\n    const paginate = (newPage: number, currentPortion: number) => {\r\n        dispatch(setNewCardsPage({newShowPage: newPage}))\r\n        dispatch(setNewCardsPortion({currentPortion: currentPortion}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const searchQuestion = (question: string, answer: string) => {\r\n        dispatch(setSearchQuestion({keyWordForQuestion: question, keyWordForAnswer: answer}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <div>\r\n                        <LearningCards status={status}\r\n                                       packId={packID}\r\n                        />\r\n                    </div>\r\n                    <SearchCard\r\n                        search={searchQuestion}\r\n                        packID={packID}\r\n                    />\r\n                    <TableRow>\r\n                        <TableCell>Questions</TableCell>\r\n                        <TableCell align=\"left\">Answers</TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button className={sortCard === \"1shots\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => getSortedCards('1shots')}>↑\r\n                            </button>\r\n                            <button className={sortCard === \"0shots\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => getSortedCards('0shots')}>↓\r\n                            </button>\r\n                            Shots\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button className={sortCard === \"1grade\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => getSortedCards('1grade')}>↑\r\n                            </button>\r\n                            <button className={sortCard === \"0grade\" ? s.button : ''} disabled={status === 'loading'}\r\n                                    onClick={() => getSortedCards('0grade')}>↓\r\n                            </button>\r\n                            Grades\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                isChecked &&\r\n                                <AddNewCard\r\n                                    packId={packID}\r\n                                    addNewCard={addNewCard}\r\n                                    status={status}/>\r\n                            }\r\n\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {cards.cards.length && cards.cards.map((el) =>\r\n                    <Card\r\n                        key={el._id}\r\n                        id={el._id}\r\n                        card={el}\r\n                        delCardHandler={delCardHandler}\r\n                        packId={packID}\r\n                        status={status}\r\n                    />)}\r\n            </Table>\r\n            <TablePaginationActions\r\n                rowsPerPage={10}\r\n                totalNumberOfPacks={cards.cardsTotalCount}\r\n                page={cards.page}\r\n                onChangePaginate={paginate}\r\n                portionSize={5}\r\n                currentPortion={cards.currentPortionToPaginator}\r\n            />\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default Cards;","import React from 'react'\r\nimport {Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../b1/features/profile/Profile\";\r\nimport Login from \"../../../b1/features/auth/Login\";\r\nimport Register from \"../../../b1/features/auth/Register\";\r\nimport Errors from \"../../../b1/features/errors/Errors\";\r\nimport Password from \"../../../b1/features/pass/Password\";\r\nimport SetPassword from \"../../../b1/features/pass/SetPassword\";\r\nimport CardPacks from \"../../../b1/features/packs/cardPacks\";\r\nimport Cards from \"../../../b1/features/cards/Cards\";\r\n\r\nexport const PATH = {\r\n    login:'/login',\r\n    register:'/register',\r\n    profile:'/profile',\r\n    error:'/404',\r\n    renew:'/renew',\r\n    setPassword:'/set-pass/:token',\r\n    packs:'/packs',\r\n    cards:'/cards/:packID?'\r\n}\r\n\r\nconst Routes = () =>{\r\n\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact component={Profile}/>\r\n                <Route path={PATH.profile} component={Profile}/>\r\n                <Route path={PATH.login} component={Login}/>\r\n                <Route path={PATH.register} component={Register}/>\r\n                <Route path={PATH.error} component={Errors}/>\r\n                <Route path={PATH.renew} component={Password}/>\r\n                <Route path={PATH.setPassword} component={SetPassword}/>\r\n                <Route path={PATH.packs} component={CardPacks}/>\r\n                <Route path={PATH.cards} component={Cards}/>\r\n                <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Routes","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {PATH} from '../Routes/Routes'\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem,\r\n} from 'reactstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <Nav className=\"mr-auto\" navbar>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.profile}>Profile</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.login}>Sign In</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.register}>Sign Up</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.renew}>Renew Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.setPassword}>Set Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.packs}>Packs</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React, {useEffect} from 'react';\nimport Header from './a1-main/UI/Header/Header';\nimport './App.css';\nimport {HashRouter, Redirect} from \"react-router-dom\";\nimport Routes, {PATH} from \"./a1-main/UI/Routes/Routes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./a1-main/BLL/store\";\nimport {authMe, logOutTC} from \"./a1-main/BLL/authReducer\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state =>state.auth.isLoggedIn )\n    const onClickLog = () => {\n        dispatch(logOutTC())\n    }\n    useEffect(()=>{\n        dispatch(authMe())\n    },[dispatch])\n\n    if(!isInitialized){\n        return <div>loading</div>\n    }\n  return (\n    <div>\n        <HashRouter>\n            {!isLoggedIn ? <Redirect to={PATH.login}/> : <button onClick={onClickLog}>logout</button>}\n            <Header/>\n            <Routes/>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {packReducer} from \"./packReducer\";\r\nimport {cardReducer} from \"./cardReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer,\r\n    packs:packReducer,\r\n    cards:cardReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-main/BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"cards_button__2wQo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorBody\":\"pagination_paginatorBody__29sjn\",\"numberPageStyle\":\"pagination_numberPageStyle__1cKFc\",\"pageActive\":\"pagination_pageActive__EnP4L\",\"buttons\":\"pagination_buttons__ZDOAl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"search_Search__2swfN\",\"SearchSpan\":\"search_SearchSpan__2JnFc\",\"SearchInput\":\"search_SearchInput__BhMfu\"};"],"sourceRoot":""}