{"version":3,"sources":["a1-main/DAL/mainAPI.ts","a1-main/BLL/authReducer.ts","b1/features/profile/Profile.tsx","b1/features/auth/Login.tsx","b1/features/auth/Register.tsx","b1/features/errors/Errors.tsx","b1/features/pass/Password.tsx","b1/features/pass/SetPassword.tsx","a1-main/BLL/packReducer.ts","b1/features/packs/cardPacksPage.tsx","b1/features/packs/TablePagination.tsx","b1/features/packs/addNewPack.tsx","b1/features/packs/cardPacks.tsx","a1-main/BLL/cardReducer.ts","b1/features/cards/UpdateCard.tsx","b1/features/cards/Card.tsx","b1/features/packs/searchPack.tsx","b1/features/cards/AddNewCard.tsx","b1/features/LearnMode/LearningCards.tsx","b1/features/cards/Cards.tsx","a1-main/UI/Routes/Routes.tsx","a1-main/UI/Header/Header.tsx","App.tsx","reportWebVitals.ts","a1-main/BLL/store.ts","index.tsx","b1/features/packs/pagination.module.css","b1/features/packs/search.module.css"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","name","put","delete","from","message","resetPasswordToken","packAPI","packData","get","cardsPack","id","_id","cardAPI","cardData","card","question","grade","card_id","slice","createSlice","initialState","isLoggedIn","isRegistered","isInitialized","user","avatar","updatedUser","isPassUpdated","isPassSet","status","reducers","getLoginAC","state","action","payload","value","registerNewUser","getMe","getUpdatedUser","getUser","forgotPass","setPass","setAppStatusAC","actions","authReducer","reducer","Profile","dispatch","useDispatch","useSelector","auth","userData","useState","setName","edit","setEdit","show","setShow","useEffect","then","res","data","catch","e","response","error","console","log","src","alt","type","autoFocus","onBlur","UpdatedUserTC","placeholder","onChange","currentTarget","onDoubleClick","onClick","to","PATH","login","Login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","pass","resetForm","profile","handleSubmit","getFieldProps","touched","style","color","Register","password_confirmation","Errors","Password","SetPassword","token","useParams","isUpdated","setPassTC","cardPacks","myCardsPack","isDeleted","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","newPageForShow","currentPortionToPaginator","sortCardsPacks","user_id","newCardsPack","updatedCardsPack","getPacks","packsData","getNewPack","changeSort","newSort","checkMyPack","delPacks","updatePackName","setNewPage","newShowPage","setNewPortion","currentPortion","packReducer","getPacksTC","getState","params","packs","max","min","sortPacks","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","CardPacksPage","props","newName","setNewName","classes","React","modalStyle","open","setOpen","deletePack","delPack","updPack","updatePack","body","className","disabled","TableBody","TableCell","component","scope","cardsCount","align","created","updated","isChecked","Modal","onClose","aria-labelledby","aria-describedby","TablePaginationActions","pageNumbers","i","ceil","totalNumberOfPacks","rowsPerPage","push","portionCount","portionSize","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","styles","paginatorBody","buttons","filter","p","map","pageStyle","pageActive","numberPageStyle","onChangePaginate","CreateNewPack","title","setTitle","newPackHandler","CardPacks","checked","setChecked","table","minWidth","newPackSortByName","TableContainer","Paper","Table","aria-label","TableHead","newValue","TableRow","el","newPage","cards","cardsTotalCount","maxGrade","minGrade","packUserId","sortCards","newCardCreated","answer","search","updatedGrade","getCards","newCard","setSearchQuestion","keyWord","setNewCardsPage","setNewCardsPortion","cardReducer","getCardsTC","packId","cardsPack_id","UpdateCard","newQuestion","setNewQuestion","updCard","Card","showHandler","shots","delCardHandler","updCardTC","SearchPack","searchMode","setSearchMode","searchQue","setSearchQue","searchAnswer","setSearchAnswer","s","SearchInput","AddNewCard","newAnswer","setNewAnswer","event","addNewCard","LearningCards","numQA","setNumQA","countA","setCountA","randomQ","setRandomQ","handleClose","getAllQuestion","getAllRandomQuestion","getAllAnswers","getIdOfQuestion","out","j","nextQuestion","floor","startAgain","newGrades","getGradeTC","Button","variant","Cards","packID","setQuestion","getSortedCards","getNewCard","createCardTC","delCardTC","register","renew","setPassword","Routes","path","exact","render","Header","Navbar","light","expand","Nav","navbar","NavItem","App","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f7386cad.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<userType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<ResponseNewUserType>('auth/register', {email, password})\r\n    },\r\n    me() {\r\n        return instance.post<userType>('auth/me')\r\n    },\r\n    updateUser(name: string) {\r\n        return instance.put<ResponseUpdatedUserType>('auth/me', {name})\r\n    },\r\n    logOut() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    forgot(email: string, from: string, message: string) {\r\n        return instance.post('auth/forgot', {email, from, message})\r\n    },\r\n    setPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<ResponseSetPasswordType>('auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\nexport const packAPI = {\r\n    cardsPack(packData: GetCardsPacksModuleType) {\r\n        return instance.get<getCardsPackResponseType>('cards/pack', packData)\r\n    },\r\n    createPack(name: string) {\r\n        return instance.post<cardPacksType>('cards/pack', {cardsPack: {name: name}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack/?id=${id}`)\r\n    },\r\n    updatePack(_id: string, name: string) {\r\n        return instance.put('cards/pack', {cardsPack: {_id: _id, name: name}})\r\n    }\r\n}\r\nexport const cardAPI = {\r\n    getCards(cardData: GetCardsModuleType) {\r\n        return instance.get<getCardResponseType>('cards/card', cardData)\r\n    },\r\n    createCard(card: createCardType) {\r\n        return instance.post('cards/card', {card})\r\n    },\r\n    deleteCard(id:string){\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    updateCard(_id:string,question:string){\r\n        return instance.put('cards/card',{card: {_id,question}})\r\n    },\r\n    getGrade(grade:number,card_id:string){\r\n        return instance.put('cards/grade',{grade,card_id})\r\n    }\r\n}\r\nexport type createCardType = {\r\n    _id: string;\r\n    cardsPack_id: string;\r\n    question: string;\r\n    answer: string;\r\n    grade: number;\r\n    shots: number;\r\n}\r\nexport type GetCardsModuleType = {\r\n    params: {\r\n        cardAnswer?: string;\r\n        cardQuestion?: string;\r\n        cardsPack_id?: string;\r\n        min?: number;\r\n        max?: number;\r\n        sortCards?: '0grade' | '1grade' | '0shots' | '1shots'\r\n        page?: number;\r\n        pageCount?: number;\r\n    }\r\n}\r\nexport type getCardResponseType = {\r\n    cards: cardType[]\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n}\r\nexport type cardType = {\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade: number;\r\n    shots: number;\r\n    user_id: string;\r\n    created: string,\r\n    updated: string,\r\n    _id: string\r\n\r\n}\r\nexport type GetCardsPacksModuleType = {\r\n    params: {\r\n        min?: number\r\n        max?: number\r\n        sortPacks?: \"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\" | '1updated' | '0updated' | '0created' | '1created'\r\n        page?: number\r\n        pageCount?: number\r\n        user_id: string\r\n        cardPacksTotalCount:number\r\n    }\r\n}\r\nexport type cardPacksType = {\r\n    _id: string;\r\n    user_id: string;\r\n    name: string;\r\n    cardsCount: number;\r\n    created: string;\r\n    updated: string;\r\n}\r\nexport type getCardsPackResponseType = {\r\n    cardPacks: cardPacksType[]\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n}\r\nexport type ResponseNewUserType = {\r\n    addedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseUpdatedUserType = {\r\n    updatedUser: {},\r\n    error?: string\r\n}\r\nexport type ResponseSetPasswordType = {\r\n    info: string,\r\n    error: string\r\n}\r\nexport type userType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    error?: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, userType} from \"../DAL/mainAPI\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype initialStateType ={\r\n    isLoggedIn:boolean;\r\n    isRegistered:boolean;\r\n    isInitialized:boolean;\r\n    user:userType\r\n    updatedUser:{},\r\n    isPassUpdated:boolean,\r\n    isPassSet:boolean,\r\n    status:RequestStatusType\r\n}\r\nconst initialState:initialStateType = {\r\n    isLoggedIn: false,\r\n    isRegistered:false,\r\n    isInitialized:false,\r\n    user: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    updatedUser:{    },\r\n    isPassUpdated:false,\r\n    isPassSet:false,\r\n    status:'idle'\r\n}\r\nconst slice = createSlice({\r\n    name:'auth',\r\n    initialState:initialState,\r\n    reducers:{\r\n        getLoginAC(state, action:PayloadAction<{value:boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n        registerNewUser(state, action:PayloadAction<{value:boolean}>){\r\n            state.isRegistered = action.payload.value\r\n        },\r\n        getMe(state, action:PayloadAction<{value:boolean}>){\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        getUpdatedUser(state, action:PayloadAction<{name:string}>){\r\n            state.updatedUser = action.payload.name\r\n        },\r\n        getUser(state, action:PayloadAction<{user:userType}>){\r\n            state.user = action.payload.user\r\n        },\r\n        forgotPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassUpdated = action.payload.value\r\n        },\r\n        setPass(state, action:PayloadAction<{value:boolean}>){\r\n            state.isPassSet = action.payload.value\r\n        },\r\n        setAppStatusAC:(state, action:PayloadAction<{status:RequestStatusType}>)=>{\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\nexport const {getLoginAC, registerNewUser, getMe, getUpdatedUser, getUser, forgotPass, setPass,setAppStatusAC} = slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\nexport const getLoginTC = (email:string,pass:string, rememberMe:boolean) => (dispatch:Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(email,pass,rememberMe).then((res)=>{\r\n        const {_id, name, email, avatar} = res.data\r\n        dispatch(getLoginAC({value:true}))\r\n        dispatch(getUser({user:{_id, name, email, avatar}}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n}\r\nexport const getRegisterTC = (email:string, password:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.register(email,password).then((res)=>{\r\n            dispatch(registerNewUser({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n        const error = e.response? e.response.data.error:\r\n            (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n    })\r\n}\r\nexport const authMe = () => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.me().then((res)=>{\r\n        dispatch(getLoginAC({value:true}))\r\n        dispatch(getUser({user:res.data}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        }).finally(()=>{\r\n        dispatch(getMe({value:true}))\r\n    })\r\n}\r\n\r\nexport const UpdatedUserTC = ((name:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.updateUser(name).then((res)=>{\r\n        dispatch(getUpdatedUser({name}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const logOutTC = (() => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logOut().then((res)=>{\r\n        dispatch(getLoginAC({value:false}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const getUserProfile = (() => (dispatch:Dispatch) =>{\r\n    authAPI.me().then((res)=>{\r\n        const {_id, name, email, avatar} = res.data\r\n        dispatch(getUser({user:{_id, name, email, avatar}}))\r\n    })\r\n        .catch((e)=>{\r\n            const error = e.response? e.response.data.error:\r\n                (e.message+',more details in the console')\r\n            console.log('Error: ', {...e})\r\n        })\r\n})\r\nexport const forgotPassTC = (email:string,from:string, message:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.forgot(email,from,message).then((res)=>{\r\n        dispatch(forgotPass({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const setPassTC = (pass:string, token:string) => (dispatch:Dispatch) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.setPassword(pass,token).then((res)=>{\r\n        dispatch(setPass({value:true}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfile, UpdatedUserTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {userType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType, userType>(state => state.auth.user)\r\n    const [name, setName] = useState<string>(userData.name)\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [show, setShow] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        if (!isLoggedIn) dispatch(getUserProfile())\r\n    }, [])\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEdit(true)\r\n        setName(userData.name)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEdit(false);\r\n        dispatch(UpdatedUserTC(name))\r\n    }\r\n    const onClickShow = () => {\r\n        setShow(!show)\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src={userData.avatar} alt=\"\"/>\r\n            </div>\r\n            {show &&\r\n            <div>{edit ? <input type=\"text\" value={name} autoFocus onBlur={activateViewMode} placeholder={'new name'}\r\n                                onChange={onChangeName}/> :\r\n                <span onDoubleClick={activateEditMode}>{name}</span>\r\n            }\r\n            </div>\r\n            }\r\n            <button onClick={onClickShow}>show</button>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import {useFormik} from 'formik';\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {getLoginTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(getLoginTC(values.email, values.password, values.rememberMe))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.profile}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")} />\r\n                <button type={'submit'} color={'primary'}>Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {getRegisterTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            password_confirmation: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            if (values.password_confirmation !== values.password) {\r\n                errors.password = 'Passwords should match'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(getRegisterTC(values.email, values.password))\r\n\r\n        }\r\n    })\r\n    if (isRegistered) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password\")} />\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'password'} {...formik.getFieldProps(\"password_confirmation\")} />\r\n                    {formik.touched.password_confirmation && formik.errors.password_confirmation &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password_confirmation}</div>}\r\n                </div>\r\n                <button type={'submit'} color={'primary'}>Register</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React from 'react'\r\n\r\nconst Errors = () =>{\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Errors","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\nconst Password = () =>{\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const fromEmail ='nya-admin@nya.nya'\r\n    const msg = `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='http://tengrix.github.io/projectv2/#/set-pass/$token$'>link</a></div>`\r\n        const formik = useFormik({\r\n        initialValues:{\r\n            email:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(forgotPassTC(values.email, fromEmail,msg))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'email'} placeholder={'email'} {...formik.getFieldProps('email')} />\r\n                {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Password","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPassTC} from \"../../../a1-main/BLL/authReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nconst SetPassword = () =>{\r\n    const {token} = useParams<{token:string}>()\r\n    const dispatch = useDispatch()\r\n    const isUpdated = useSelector<AppRootStateType, boolean>(state => state.auth.isPassSet)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            password:''\r\n        },\r\n        validate:(values)=>{\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.password)) {\r\n                errors.password = 'Invalid email address';\r\n            }\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(setPassTC(values.password, token))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    if(isUpdated){\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <input type={'password'} placeholder={'password'} {...formik.getFieldProps('password')} />\r\n                {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                <button type={'submit'}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SetPassword","import {createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {\r\n    cardPacksType,\r\n    getCardsPackResponseType,\r\n    GetCardsPacksModuleType,\r\n    packAPI\r\n} from \"../DAL/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppStatusAC} from \"./authReducer\";\r\nexport type initialStateType = {\r\n    cardPacks:cardPacksType[];\r\n    myCardsPack:boolean;\r\n    isDeleted:boolean;\r\n    cardPacksTotalCount:number;\r\n    maxCardsCount:number;\r\n    minCardsCount:number;\r\n    page:number;\r\n    pageCount:number;\r\n    sortCardsPacks:\"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\"|'1updated'|'0updated'|'0created'|'1created';\r\n    user_id:string;\r\n    newPageForShow: number,\r\n    currentPortionToPaginator: number,\r\n    newCardsPack:{\r\n        name:string\r\n    },\r\n    updatedCardsPack:{\r\n        name:string\r\n    }\r\n}\r\nconst initialState:initialStateType = {\r\n    cardPacks:[],\r\n    myCardsPack:false,\r\n    isDeleted:false,\r\n    cardPacksTotalCount:14,\r\n    maxCardsCount:103,\r\n    minCardsCount:0,\r\n    page:1,\r\n    pageCount:10,\r\n    newPageForShow: 1,\r\n    currentPortionToPaginator: 1,\r\n    sortCardsPacks: \"0cardsCount\",\r\n    user_id:'',\r\n    newCardsPack:{\r\n        name:''\r\n    },\r\n    updatedCardsPack:{\r\n        name:''\r\n    }\r\n}\r\n\r\nconst slice = createSlice({\r\n    name:'packReducer',\r\n    initialState:initialState,\r\n    reducers:{\r\n        getPacks(state, action:PayloadAction<{packsData:getCardsPackResponseType}>){\r\n            state.cardPacks = action.payload.packsData.cardPacks\r\n            state.cardPacksTotalCount = action.payload.packsData.cardPacksTotalCount\r\n            state.page = action.payload.packsData.page\r\n            state.maxCardsCount = action.payload.packsData.maxCardsCount\r\n            state.pageCount = action.payload.packsData.pageCount\r\n            state.minCardsCount = action.payload.packsData.minCardsCount\r\n        },\r\n        getNewPack(state,action:PayloadAction<{ name: string }>){\r\n            state.newCardsPack.name = action.payload.name\r\n        },\r\n        changeSort(state, action:PayloadAction<{newSort:\"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\"|'1updated'|'0updated'|'0created'|'1created'}>){\r\n            state.sortCardsPacks = action.payload.newSort\r\n        },\r\n        checkMyPack(state,action:PayloadAction<{value:boolean}>){\r\n            state.myCardsPack = action.payload.value\r\n        },\r\n        delPacks(state,action:PayloadAction<{value:boolean}>){\r\n            state.isDeleted = action.payload.value\r\n        },\r\n        updatePackName(state,action:PayloadAction<{name:string}>){\r\n            state.updatedCardsPack.name = action.payload.name\r\n        },\r\n        setNewPage(state,action:PayloadAction<{newShowPage:number}>){\r\n            state.page = action.payload.newShowPage\r\n        },\r\n        setNewPortion(state,action:PayloadAction<{currentPortion:number}>){\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        }\r\n    }\r\n})\r\nexport const {getPacks,getNewPack,changeSort,checkMyPack,delPacks,updatePackName,setNewPage,setNewPortion} = slice.actions\r\nexport const packReducer = slice.reducer\r\n\r\nexport const getPacksTC = () => (dispatch:Dispatch, getState:()=>AppRootStateType) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    const state = getState()\r\n    const packData:GetCardsPacksModuleType = {\r\n        params:{\r\n            page:state.packs.page,\r\n            max:state.packs.maxCardsCount,\r\n            pageCount:state.packs.pageCount,\r\n            min:state.packs.minCardsCount,\r\n            sortPacks:state.packs.sortCardsPacks,\r\n            user_id:state.packs.user_id,\r\n            cardPacksTotalCount:state.packs.cardPacksTotalCount\r\n        }\r\n    }\r\n    if(state.packs.myCardsPack){\r\n        packData.params.user_id = state.auth.user._id\r\n    }\r\n    packAPI.cardsPack(packData).then(res=>{\r\n        dispatch(getPacks({packsData:res.data}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const createNewPack = (name:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>)=>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.createPack(name).then(res=>{\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const delPack = (id:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.deletePack(id).then(()=>{\r\n        dispatch(delPacks({value:true}))\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}\r\nexport const updatePack = (id:string, name:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) =>{\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    packAPI.updatePack(id,name).then((res)=>{\r\n        dispatch(getPacksTC())\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    })\r\n}","import {makeStyles, Modal, TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {cardPacksType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {delPack, updatePack, updatePackName} from \"../../../a1-main/BLL/packReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getCardsTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype cardPacksPageType = {\r\n    packs: cardPacksType;\r\n    isChecked: boolean;\r\n    status: RequestStatusType\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst CardPacksPage = (props: cardPacksPageType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [edit, setEdit] = useState<boolean>(true)\r\n    const [newName, setNewName] = useState<string>('')\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const deletePack = (id: string) => {\r\n        dispatch(delPack(id))\r\n    }\r\n    const updPack = (id: string, name: string) => {\r\n        dispatch(updatePackName({name: newName}))\r\n        dispatch(updatePack(id, name))\r\n    }\r\n    const editHandler = () => {\r\n        setEdit(!edit)\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <button disabled={props.status === 'loading'} onClick={() => editHandler()}>edit</button>\r\n            <button disabled={props.status === 'loading'} onClick={() => deletePack(props.packs._id)}>del</button>\r\n            {!edit ?\r\n            <span>\r\n                <input type=\"text\" value={newName} onChange={(e) => setNewName(e.currentTarget.value)}/>\r\n                <button disabled={props.status === 'loading'} onClick={() => updPack(props.packs._id, newName)}>save\r\n            </button>\r\n            </span>\r\n                 : ''}\r\n        </div>\r\n    )\r\n    return (\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.packs.name}\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\">{props.packs.cardsCount}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.created}</TableCell>\r\n            <TableCell align=\"right\">{props.packs.updated}</TableCell>\r\n            {props.isChecked &&\r\n            <TableCell align=\"right\">\r\n                <button disabled={props.status === 'loading'} type=\"button\" onClick={handleOpen}>\r\n                    Edit\r\n                </button>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    {body}\r\n                </Modal>\r\n            </TableCell>\r\n            }\r\n            <NavLink to={'/cards/' + props.packs._id}>\r\n                <button disabled={props.status === 'loading'}>learn</button>\r\n            </NavLink>\r\n        </TableBody>\r\n    )\r\n}\r\nexport default CardPacksPage;","import React, {useState} from \"react\";\r\nimport styles from \"./pagination.module.css\"\r\ninterface TablePaginationActionsProps {\r\n    currentPortion:number;\r\n    page:number;\r\n    rowsPerPage:number;\r\n    totalNumberOfPacks:number\r\n    onChangePaginate:(page:number,currentPortion:number)=>void\r\n    portionSize:number\r\n}\r\n\r\nexport function TablePaginationActions(props: TablePaginationActionsProps) {\r\n    const pageNumbers = []\r\n    for(let i = 1; i <= Math.ceil(props.totalNumberOfPacks/props.rowsPerPage);i++){\r\n        pageNumbers.push(i)\r\n    }\r\n    const portionCount = Math.ceil(Math.ceil(props.totalNumberOfPacks/props.rowsPerPage) / props.portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(props.currentPortion)\r\n    const leftPortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPortionNumber = portionNumber * props.portionSize\r\n    return (\r\n            <div className={styles.paginatorBody}>\r\n                <button\r\n                    onClick={() => setPortionNumber(1)}\r\n                    disabled={portionNumber == 1}\r\n                    className={styles.buttons}\r\n                >\r\n                    - -\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}\r\n                    disabled={portionNumber == 1}\r\n                    className={styles.buttons}\r\n                >\r\n                    -\r\n                </button>\r\n                {pageNumbers\r\n                    .filter((p) => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                    .map((p) => {\r\n                        const pageStyle = `${props.page === p && styles.pageActive} ${\r\n                            styles.numberPageStyle\r\n                        }`\r\n                        return (\r\n                            <button key={p} onClick={() => props.onChangePaginate(p,portionNumber)} className={pageStyle}>\r\n                            {p}\r\n                        </button>\r\n                        )\r\n                    })}\r\n                <button\r\n                    onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}\r\n                    disabled={portionCount <= portionNumber}\r\n                    className={styles.buttons}\r\n                >\r\n                    +\r\n                </button>\r\n                <button\r\n                    onClick={() => setPortionNumber(portionCount)}\r\n                    disabled={portionCount <= portionNumber}\r\n                    className={styles.buttons}\r\n                >\r\n                    ++\r\n                </button>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {initialStateType} from \"../../../a1-main/BLL/packReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype CreateNewPackType = {\r\n    status:RequestStatusType;\r\n    packData:initialStateType;\r\n    newPackHandler:(title:string)=>void\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst CreateNewPack = (props:CreateNewPackType) => {\r\n    const [title, setTitle] = useState<string>(props.packData.newCardsPack.name)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n        <input disabled={props.status==='loading'} placeholder={'New Pack'} type=\"text\" value={title} onChange={onChangeName}/>\r\n        <button disabled={props.status==='loading'} onClick={() => props.newPackHandler(title)}>add</button>\r\n    </div>\r\n    )\r\n    return(\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>\r\n                Add new pack\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateNewPack;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    changeSort,\r\n    checkMyPack,\r\n    createNewPack,\r\n    getPacksTC, initialStateType,\r\n    setNewPage, setNewPortion,\r\n} from \"../../../a1-main/BLL/packReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Table} from \"reactstrap\";\r\nimport {Paper, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport CardPacksPage from \"./cardPacksPage\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {TablePaginationActions} from \"./TablePagination\";\r\nimport SearchPack from \"./searchPack\";\r\nimport CreateNewPack from \"./addNewPack\";\r\n\r\nconst CardPacks = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType,RequestStatusType>(state => state.auth.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const cardData = useSelector<AppRootStateType,initialStateType>(state => state.packs)\r\n\r\n    const [checked, setChecked] = useState<boolean>(isChecked)\r\n\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [])\r\n    const newPackHandler = (title: string) => {\r\n        dispatch(createNewPack(title))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const isItMyPack = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.currentTarget.checked\r\n        setChecked(newValue)\r\n        dispatch(checkMyPack({value: newValue}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const newPackSortByName = (name: \"0name\" | \"1name\" | \"0cardsCount\" | \"1cardsCount\" | '1updated' | '0updated' | '0created' | '1created') => {\r\n        dispatch(changeSort({newSort: name}))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const paginate = (newPage:number,currentPortion:number) => {\r\n        dispatch(setNewPage({newShowPage:newPage}))\r\n        dispatch(setNewPortion({currentPortion:currentPortion}))\r\n        dispatch(getPacksTC())\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                   My pack <input type=\"checkbox\" checked={checked} onChange={isItMyPack}/>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1name')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0name')}>↓</button>\r\n                            Name</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0cardsCount')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1cardsCount')}>↓</button>\r\n                            Cards Count</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1created')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0created')}>↓</button>\r\n                            Created</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('1updated')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => newPackSortByName('0updated')}>↓</button>\r\n                            Updated</TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <CreateNewPack\r\n                                newPackHandler={newPackHandler}\r\n                                packData={cardData}\r\n                                status={status}/>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                    {cardData.cardPacks.map((el) => (\r\n                         <CardPacksPage\r\n                             key={el._id}\r\n                             packs={el}\r\n                             isChecked={isChecked}\r\n                             status={status}\r\n                         />\r\n                    ))}\r\n            </Table>\r\n            <TablePaginationActions\r\n                rowsPerPage={10}\r\n                totalNumberOfPacks={cardData.cardPacksTotalCount}\r\n                page={cardData.page}\r\n                onChangePaginate={paginate}\r\n                portionSize={5}\r\n                currentPortion={cardData.currentPortionToPaginator}\r\n            />\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default CardPacks","import {createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\r\nimport {cardAPI, cardType, createCardType, getCardResponseType, GetCardsModuleType} from \"../DAL/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nexport type cardInitialStateType = {\r\n    cards:cardType[]\r\n    cardsTotalCount:number;\r\n    maxGrade:number;\r\n    minGrade:number;\r\n    page:number;\r\n    currentPortionToPaginator:number;\r\n    pageCount:number;\r\n    packUserId:string;\r\n    sortCards:'0grade'|'1grade'|'0shots'|'1shots';\r\n    newCardCreated:{\r\n        answer:string,\r\n        question:string\r\n    }\r\n    search:boolean;\r\n    updatedGrade:{\r\n        grade:number,\r\n    }\r\n}\r\nconst initialState:cardInitialStateType = {\r\n    cards:[],\r\n    cardsTotalCount:3,\r\n    maxGrade:5,\r\n    minGrade:1,\r\n    page:1,\r\n    pageCount:10,\r\n    currentPortionToPaginator:1,\r\n    packUserId:'',\r\n    sortCards:'0grade',\r\n    newCardCreated:{\r\n        answer:'',\r\n        question:''\r\n    },\r\n    search:false,\r\n    updatedGrade:{\r\n        grade:0,\r\n    }\r\n}\r\nconst slice = createSlice({\r\n    name:'cardReducer',\r\n    initialState: initialState,\r\n    reducers:{\r\n        getCards(state,action:PayloadAction<{cardData:getCardResponseType}>){\r\n            state.cards = action.payload.cardData.cards\r\n            state.page = action.payload.cardData.page\r\n            state.pageCount = action.payload.cardData.pageCount\r\n            state.packUserId = action.payload.cardData.packUserId\r\n            state.cardsTotalCount = action.payload.cardData.cardsTotalCount\r\n            state.maxGrade = action.payload.cardData.maxGrade\r\n            state.minGrade = action.payload.cardData.minGrade\r\n        },\r\n        sortCards(state,action:PayloadAction<{value:'0grade'|'1grade'|'0shots'|'1shots'}>){\r\n            state.sortCards = action.payload.value\r\n        },\r\n        newCard(state,action:PayloadAction<{question:string, answer:string}>){\r\n            state.newCardCreated.answer = action.payload.answer\r\n            state.newCardCreated.question = action.payload.question\r\n        },\r\n        setSearchQuestion(state,action:PayloadAction<{keyWord:string}>){\r\n            state.cards = state.cards.filter(el=>el.question.search(action.payload.keyWord))\r\n        },\r\n        setNewCardsPage(state,action:PayloadAction<{newShowPage:number}>){\r\n            state.page = action.payload.newShowPage\r\n        },\r\n        setNewCardsPortion(state,action:PayloadAction<{currentPortion:number}>){\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        },\r\n    }\r\n})\r\nexport const {getCards,sortCards,newCard,setSearchQuestion,setNewCardsPortion,setNewCardsPage} = slice.actions\r\nexport const cardReducer = slice.reducer\r\n\r\nexport const getCardsTC = (packId:string) => (dispatch:Dispatch,getState:()=>AppRootStateType) =>{\r\n    let state = getState()\r\n    const cardData:GetCardsModuleType = {\r\n        params:{\r\n            min:state.cards.minGrade,\r\n            max:state.cards.maxGrade,\r\n            page:state.cards.page,\r\n            sortCards:state.cards.sortCards,\r\n            pageCount:state.cards.pageCount,\r\n            cardsPack_id:packId\r\n        }\r\n    }\r\n    cardAPI.getCards(cardData).then((res)=>{\r\n        dispatch(getCards({cardData:res.data}))\r\n    })\r\n}\r\nexport const createCardTC = (packId:string,question:string, answer:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>, getState:()=>AppRootStateType) =>{\r\n    let state = getState()\r\n    let getNewCard:createCardType = {\r\n            _id:state.auth.user._id,\r\n            cardsPack_id:packId,\r\n            grade:0,\r\n            shots:0,\r\n            answer:answer,\r\n            question:question\r\n    }\r\n    cardAPI.createCard(getNewCard).then((res)=>{\r\n        dispatch(getCardsTC(packId))\r\n    })\r\n}\r\nexport const delCardTC = (id:string) => () =>{\r\n    cardAPI.deleteCard(id).then(()=>{\r\n    })\r\n}\r\nexport const updCardTC = (id:string,question:string,packId:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) => {\r\n    cardAPI.updateCard(id,question).then(()=>{\r\n        dispatch(getCardsTC(packId))\r\n    })\r\n}\r\nexport const getGradeTC = (grade:number,id:string,packId:string) => (dispatch:ThunkDispatch<void,AppRootStateType,any>) =>{\r\n    cardAPI.getGrade(grade, id).then(()=>{\r\n        dispatch(getCardsTC(packId))\r\n    })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype UpdateCardType = {\r\n    status:RequestStatusType;\r\n    updCard:(id:string,question:string, packId:string)=>void;\r\n    id:string;\r\n    packId:string;\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst UpdateCard = (props:UpdateCardType) => {\r\n    const [newQuestion, setNewQuestion] = useState<string>('')\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const questionUpdHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewQuestion(e.currentTarget.value)\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <input disabled={props.status==='loading'} placeholder={'New Question'} type=\"text\" value={newQuestion} onChange={questionUpdHandler}/>\r\n            <button disabled={props.status==='loading'} onClick={()=>props.updCard(props.id,newQuestion,props.packId)}>upd</button>\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>\r\n                update Card\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateCard;","import {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport {TableBody, TableCell} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updCardTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport UpdateCard from \"./UpdateCard\";\r\nimport AddNewCard from \"./AddNewCard\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\n\r\ntype CardType = {\r\n    card: cardType;\r\n    delCardHandler:(id:string)=>void;\r\n    id:string;\r\n    packId:string;\r\n    addNewCard:(id:string,question:string, answer:string)=>void;\r\n    status:RequestStatusType\r\n}\r\nconst Card = (props: CardType) => {\r\n    const dispatch = useDispatch()\r\n    const [show,setShow] = useState<boolean>(false)\r\n    const isChecked = useSelector<AppRootStateType, boolean>(state => state.packs.myCardsPack)\r\n    const showHandler = () => {\r\n        setShow(!show)\r\n    }\r\n\r\n    const updCard = (id:string,question:string, packId:string ) => {\r\n        dispatch(updCardTC(id,question,packId))\r\n    }\r\n    return (\r\n        <TableBody>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {props.card.question}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {show && props.card.answer}\r\n                {!show? <button disabled={props.status==='loading'} onClick={() => showHandler()}>show</button>:<button onClick={() => showHandler()}>close</button>}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.shots}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {props.card.grade}\r\n            </TableCell>\r\n            {isChecked &&\r\n                <TableCell>\r\n                        <button disabled={props.status==='loading'} onClick={()=>props.delCardHandler(props.id)}>del</button>\r\n                      <UpdateCard\r\n                          updCard={updCard}\r\n                          status={props.status}\r\n                          id={props.id}\r\n                          packId={props.packId}/>\r\n                </TableCell>\r\n\r\n            }\r\n        </TableBody>\r\n    )\r\n}\r\nexport default Card;","import {ChangeEvent, useState} from \"react\";\r\nimport s from './search.module.css'\r\ntype SearchType={\r\n    onChange:(event:ChangeEvent<HTMLInputElement>)=>void;\r\n    question:string;\r\n}\r\n\r\nconst SearchPack = (props:SearchType) => {\r\n    const [searchMode, setSearchMode] = useState<boolean>(false)\r\n    const [searchQue, setSearchQue] = useState<boolean>(false)\r\n    const [searchAnswer, setSearchAnswer] = useState<boolean>(false)\r\n    const activateMode = () => {\r\n        setSearchMode(!searchMode)\r\n        setSearchAnswer(false)\r\n        setSearchQue(false)\r\n    }\r\n    return(\r\n        <span>\r\n            <button onClick={activateMode}>find</button>\r\n            {searchMode &&\r\n                <span>\r\n                    { searchQue ? <div>\r\n                            <input type=\"text\"\r\n                                   className={s.SearchInput}\r\n                                   onChange={props.onChange}\r\n                                   placeholder={'Search question'}\r\n                            />\r\n                    </div>:\r\n                        <span>\r\n                             <button onClick={()=>setSearchAnswer(!searchAnswer)}>answer</button>\r\n                        </span>\r\n\r\n                    }\r\n                    {searchAnswer ? <div>\r\n                            <input type=\"text\"\r\n                                   className={s.SearchInput}\r\n                                   onChange={props.onChange}\r\n                                   placeholder={'Search answer'}\r\n                            />\r\n                    </div> :\r\n                        <button onClick={()=>setSearchQue(!searchQue)}>question</button>\r\n                    }\r\n                </span>\r\n            }\r\n        </span>\r\n    )\r\n}\r\nexport default SearchPack;","import React, {useState} from \"react\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport {makeStyles, Modal} from \"@material-ui/core\";\r\n\r\ntype AddNewCardType = {\r\n    addNewCard:(id:string, question:string, answer:string)=>void\r\n    status:RequestStatusType;\r\n    packId:string\r\n}\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst AddNewCard = (props:AddNewCardType) => {\r\n    const [newQuestion, setNewQuestion] = useState<string>('')\r\n    const [newAnswer, setNewAnswer] = useState<string>('')\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n        <input type=\"text\" value={newQuestion} placeholder={'New Question'} onChange={event => setNewQuestion(event.currentTarget.value)}/>\r\n        <input type=\"text\" value={newAnswer} placeholder={'New Answer'} onChange={event => setNewAnswer(event.currentTarget.value)}/>\r\n        <button disabled={props.status==='loading'} onClick={()=>props.addNewCard(props.packId,newQuestion,newAnswer)}>add</button>\r\n    </div>)\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>\r\n                Add Card\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default AddNewCard;\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {cardType} from \"../../../a1-main/DAL/mainAPI\";\r\nimport React, {useState} from \"react\";\r\nimport {getGradeTC} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {Button, makeStyles, Modal} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\n\r\ntype LearningCardsType = {\r\n    status: RequestStatusType;\r\n    packId: string\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand()\r\n    const left = 50 + rand()\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: \"absolute\",\r\n        width: 500,\r\n        backgroundColor: \"lightpink\",\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}))\r\n\r\n\r\nconst LearningCards = (props: LearningCardsType) => {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, cardType[]>(state => state.cards.cards)\r\n    const [numQA, setNumQA] = useState<number>(0)\r\n    const [countA, setCountA] = useState<number>(1)\r\n    const grade = [\"super easy\", \"easy\", \"just fine\", \"hard\", \"super hard\"]\r\n    const [show, setShow] = useState<boolean>(false)\r\n    const [randomQ, setRandomQ] = useState<boolean>(false)\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const showAnswer = () => {\r\n        setShow(!show)\r\n    }\r\n    let getAllQuestion: Array<any> = []\r\n    let getAllRandomQuestion: Array<any> = []\r\n    let getAllAnswers: Array<string | number> = []\r\n    let getIdOfQuestion: Array<string> = []\r\n    let out: Array<number> = [];\r\n    cards.map((el) => (getAllQuestion.push([el.question]), getAllAnswers.push(el.answer),\r\n        getIdOfQuestion.push(el._id), getAllRandomQuestion.push([el.question])))\r\n    cards.map((el, i) => getAllQuestion[i].push(el.grade))\r\n    for (let i = 0; i < getAllQuestion.length; ++i) {\r\n        for (let j = 0; j < getAllQuestion[i][1]; ++j) {\r\n            out.push(getAllQuestion[i][0]);\r\n        }\r\n    }\r\n    const nextQuestion = () => {\r\n        setNumQA(numQA + 1)\r\n        setCountA(countA + 1)\r\n        if (randomQ) {\r\n            setNumQA(out[Math.floor(Math.random() * out.length)])\r\n            console.log(out[Math.floor(Math.random() * out.length)])\r\n            setCountA(countA + 1)\r\n        }\r\n    }\r\n    const startAgain = () => {\r\n        setRandomQ(true)\r\n        setCountA(1)\r\n    }\r\n    const newGrades = (grade: number, id: string, packId: string) => {\r\n        dispatch(getGradeTC(grade, id, packId))\r\n        nextQuestion()\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">Learn \"Pack Name\"</h2>\r\n            <div id=\"simple-modal-description\">\r\n                <span>\r\n                    Question number: {countA}/{cards.length}{\" \"}\r\n\r\n                </span>\r\n                <div>{randomQ ? out[Math.floor(Math.random() * out.length)] : getAllRandomQuestion[numQA]}</div>\r\n                <div>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant={\"outlined\"}\r\n                        disabled={false}\r\n                        onClick={showAnswer}\r\n                    >\r\n                        show answer\r\n                    </Button>\r\n                </div>\r\n                <div>{show ? getAllAnswers[numQA] : \"\"}</div>\r\n            </div>\r\n            <div>\r\n                {countA === cards.length ? (\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            variant={\"outlined\"}\r\n                            onClick={() => {\r\n                                startAgain()\r\n                            }}\r\n                        >\r\n                            start again\r\n                        </Button>\r\n                    ) :\r\n                    <div>\r\n                        <h4>Rate Yourself</h4>\r\n                        {grade.map((el, i) => (\r\n                            <Button\r\n                                key={\"grade-\" + i}\r\n                                onClick={() => newGrades(i + 1, getIdOfQuestion[numQA], props.packId)}\r\n                            >\r\n                                {el}\r\n                            </Button>\r\n                        ))}\r\n                    </div>}\r\n            </div>\r\n            <Button color=\"secondary\" variant=\"outlined\" onClick={handleClose}>\r\n                Cancel\r\n            </Button>\r\n            {countA === cards.length ? (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={true}\r\n                    onClick={() => {\r\n                        startAgain()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            ) : (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={false}\r\n                    onClick={() => {\r\n                        nextQuestion()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            )}\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={handleOpen}\r\n                    disabled={props.status === 'loading'}\r\n                >\r\n                    Learning MODE\r\n                </Button>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    {body}\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LearningCards;","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    cardInitialStateType,\r\n    createCardTC,\r\n    delCardTC,\r\n    getCardsTC, setNewCardsPage, setNewCardsPortion,\r\n    sortCards\r\n} from \"../../../a1-main/BLL/cardReducer\";\r\nimport {AppRootStateType} from \"../../../a1-main/BLL/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport {PATH} from \"../../../a1-main/UI/Routes/Routes\";\r\nimport {Paper, Table, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {RequestStatusType} from \"../../../a1-main/BLL/authReducer\";\r\nimport SearchPack from \"../packs/searchPack\";\r\nimport {TablePaginationActions} from \"../packs/TablePagination\";\r\nimport {getPacksTC} from \"../../../a1-main/BLL/packReducer\";\r\nimport AddNewCard from \"./AddNewCard\";\r\nimport LearningCards from \"../LearnMode/LearningCards\";\r\n\r\nconst Cards = () => {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, cardInitialStateType>(state => state.cards)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppRootStateType,RequestStatusType>(state => state.auth.status)\r\n    const {packID} = useParams<{ packID: string }>()\r\n\r\n    const [question,setQuestion] = useState<string>('')\r\n    const [answer,setAnswer] = useState<string>('')\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        getSortedCards('1grade')\r\n    }, [dispatch,packID])\r\n    const getSortedCards = (name: '0grade' | '1grade' | '0shots' | '1shots') => {\r\n        dispatch(sortCards({value: name}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const addNewCard = (id:string,question:string, answer:string) => {\r\n        dispatch(createCardTC(id,question,answer))\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.login}/>\r\n    }\r\n    const delCardHandler = (id:string) =>{\r\n        dispatch(delCardTC(id))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const onChangeSearchHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setQuestion(e.currentTarget.value)\r\n    }\r\n    const paginate = (newPage:number,currentPortion:number) => {\r\n        dispatch(setNewCardsPage({newShowPage:newPage}))\r\n        dispatch(setNewCardsPortion({currentPortion:currentPortion}))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <div>\r\n                        <LearningCards status={status}\r\n                                       packId={packID}\r\n                        />\r\n                    </div>\r\n                    <SearchPack\r\n                        question={question}\r\n                        onChange={onChangeSearchHandler}\r\n                    />\r\n                    <TableRow>\r\n                        <TableCell>Questions</TableCell>\r\n                        <TableCell align=\"left\">Answers</TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('1shots')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('0shots')}>↓</button>\r\n                            Shots\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('1grade')}>↑</button>\r\n                            <button disabled={status==='loading'} onClick={() => getSortedCards('0grade')}>↓</button>\r\n                            Grades\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            <AddNewCard\r\n                                packId={packID}\r\n                                addNewCard={addNewCard}\r\n                                status={status}/>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {cards.cards.length && cards.cards.map((el) =>\r\n                    <Card\r\n                        key={el._id}\r\n                        id={el._id}\r\n                        card={el}\r\n                        delCardHandler={delCardHandler}\r\n                        packId={packID}\r\n                        addNewCard={addNewCard}\r\n                        status={status}\r\n                    />)}\r\n            </Table>\r\n            <TablePaginationActions\r\n                rowsPerPage={10}\r\n                totalNumberOfPacks={cards.cardsTotalCount}\r\n                page={cards.page}\r\n                onChangePaginate={paginate}\r\n                portionSize={5}\r\n                currentPortion={cards.currentPortionToPaginator}\r\n            />\r\n        </TableContainer>\r\n    )\r\n}\r\nexport default Cards;","import React from 'react'\r\nimport {Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../b1/features/profile/Profile\";\r\nimport Login from \"../../../b1/features/auth/Login\";\r\nimport Register from \"../../../b1/features/auth/Register\";\r\nimport Errors from \"../../../b1/features/errors/Errors\";\r\nimport Password from \"../../../b1/features/pass/Password\";\r\nimport SetPassword from \"../../../b1/features/pass/SetPassword\";\r\nimport CardPacks from \"../../../b1/features/packs/cardPacks\";\r\nimport Cards from \"../../../b1/features/cards/Cards\";\r\n\r\nexport const PATH = {\r\n    login:'/login',\r\n    register:'/register',\r\n    profile:'/profile',\r\n    error:'/404',\r\n    renew:'/renew',\r\n    setPassword:'/set-pass/:token',\r\n    packs:'/packs',\r\n    cards:'/cards/:packID?'\r\n}\r\n\r\nconst Routes = () =>{\r\n\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact component={Profile}/>\r\n                <Route path={PATH.profile} component={Profile}/>\r\n                <Route path={PATH.login} component={Login}/>\r\n                <Route path={PATH.register} component={Register}/>\r\n                <Route path={PATH.error} component={Errors}/>\r\n                <Route path={PATH.renew} component={Password}/>\r\n                <Route path={PATH.setPassword} component={SetPassword}/>\r\n                <Route path={PATH.packs} component={CardPacks}/>\r\n                <Route path={PATH.cards} component={Cards}/>\r\n                <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.error} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Routes","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {PATH} from '../Routes/Routes'\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem,\r\n} from 'reactstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <Nav className=\"mr-auto\" navbar>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.profile}>Profile</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.login}>Sign In</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.register}>Sign Up</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.renew}>Renew Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.setPassword}>Set Password</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to={PATH.packs}>Packs</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React, {useEffect} from 'react';\nimport Header from './a1-main/UI/Header/Header';\nimport './App.css';\nimport {HashRouter, Redirect} from \"react-router-dom\";\nimport Routes, {PATH} from \"./a1-main/UI/Routes/Routes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./a1-main/BLL/store\";\nimport {authMe, logOutTC} from \"./a1-main/BLL/authReducer\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state =>state.auth.isLoggedIn )\n    const onClickLog = () => {\n        dispatch(logOutTC())\n    }\n    useEffect(()=>{\n        dispatch(authMe())\n    },[dispatch])\n\n    if(!isInitialized){\n        return <div>loading</div>\n    }\n  return (\n    <div>\n        <HashRouter>\n            {!isLoggedIn ? <Redirect to={PATH.login}/> : <button onClick={onClickLog}>logout</button>}\n            <Header/>\n            <Routes/>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {packReducer} from \"./packReducer\";\r\nimport {cardReducer} from \"./cardReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer,\r\n    packs:packReducer,\r\n    cards:cardReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./a1-main/BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorBody\":\"pagination_paginatorBody__29sjn\",\"numberPageStyle\":\"pagination_numberPageStyle__1cKFc\",\"pageActive\":\"pagination_pageActive__EnP4L\",\"buttons\":\"pagination_buttons__ZDOAl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"search_Search__2swfN\",\"SearchSpan\":\"search_SearchSpan__2JnFc\",\"SearchInput\":\"search_SearchInput__BhMfu\"};"],"sourceRoot":""}